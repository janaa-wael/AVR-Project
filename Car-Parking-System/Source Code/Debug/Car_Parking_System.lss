
Car_Parking_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00003b08  00003b9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800192  00800192  00003cce  2**0
                  ALLOC
  3 .stab         00003300  00000000  00000000  00003cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019b7  00000000  00000000  00006fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008987  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008d19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b124  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c4aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d680  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d840  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000db36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e4a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 39       	cpi	r26, 0x9B	; 155
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 25 1a 	call	0x344a	; 0x344a <main>
      8a:	0c 94 82 1d 	jmp	0x3b04	; 0x3b04 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e8       	ldi	r26, 0x87	; 135
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e8       	ldi	r24, 0x87	; 135
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 e8       	ldi	r22, 0x87	; 135
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 b2 1a 	jmp	0x3564	; 0x3564 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e1 57       	subi	r30, 0x71	; 113
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     e58:	80 91 92 01 	lds	r24, 0x0192
     e5c:	90 91 93 01 	lds	r25, 0x0193
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     e64:	e0 91 92 01 	lds	r30, 0x0192
     e68:	f0 91 93 01 	lds	r31, 0x0193
     e6c:	09 95       	icall
	}
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <ICU_init+0x6>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
     ea2:	a1 e3       	ldi	r26, 0x31	; 49
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e1 e3       	ldi	r30, 0x31	; 49
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8f 7b       	andi	r24, 0xBF	; 191
     eae:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
     eb0:	ef e4       	ldi	r30, 0x4F	; 79
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	8c e0       	ldi	r24, 0x0C	; 12
     eb6:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
     eb8:	ae e4       	ldi	r26, 0x4E	; 78
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	ee e4       	ldi	r30, 0x4E	; 78
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	98 2f       	mov	r25, r24
     ec4:	98 7f       	andi	r25, 0xF8	; 248
     ec6:	e9 81       	ldd	r30, Y+1	; 0x01
     ec8:	fa 81       	ldd	r31, Y+2	; 0x02
     eca:	80 81       	ld	r24, Z
     ecc:	89 2b       	or	r24, r25
     ece:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
     ed0:	ae e4       	ldi	r26, 0x4E	; 78
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	ee e4       	ldi	r30, 0x4E	; 78
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	28 2f       	mov	r18, r24
     edc:	2f 7b       	andi	r18, 0xBF	; 191
     ede:	e9 81       	ldd	r30, Y+1	; 0x01
     ee0:	fa 81       	ldd	r31, Y+2	; 0x02
     ee2:	81 81       	ldd	r24, Z+1	; 0x01
     ee4:	88 2f       	mov	r24, r24
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	00 24       	eor	r0, r0
     eea:	96 95       	lsr	r25
     eec:	87 95       	ror	r24
     eee:	07 94       	ror	r0
     ef0:	96 95       	lsr	r25
     ef2:	87 95       	ror	r24
     ef4:	07 94       	ror	r0
     ef6:	98 2f       	mov	r25, r24
     ef8:	80 2d       	mov	r24, r0
     efa:	82 2b       	or	r24, r18
     efc:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
     efe:	ec e4       	ldi	r30, 0x4C	; 76
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	11 82       	std	Z+1, r1	; 0x01
     f04:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
     f06:	e6 e4       	ldi	r30, 0x46	; 70
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	11 82       	std	Z+1, r1	; 0x01
     f0c:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
     f0e:	a9 e5       	ldi	r26, 0x59	; 89
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e9 e5       	ldi	r30, 0x59	; 89
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 62       	ori	r24, 0x20	; 32
     f1a:	8c 93       	st	X, r24
}
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <ICU_setCallBack+0x6>
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	90 93 93 01 	sts	0x0193, r25
     f3c:	80 93 92 01 	sts	0x0192, r24
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
     f56:	ae e4       	ldi	r26, 0x4E	; 78
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	ee e4       	ldi	r30, 0x4E	; 78
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	28 2f       	mov	r18, r24
     f62:	2f 7b       	andi	r18, 0xBF	; 191
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	00 24       	eor	r0, r0
     f6c:	96 95       	lsr	r25
     f6e:	87 95       	ror	r24
     f70:	07 94       	ror	r0
     f72:	96 95       	lsr	r25
     f74:	87 95       	ror	r24
     f76:	07 94       	ror	r0
     f78:	98 2f       	mov	r25, r24
     f7a:	80 2d       	mov	r24, r0
     f7c:	82 2b       	or	r24, r18
     f7e:	8c 93       	st	X, r24
}
     f80:	0f 90       	pop	r0
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     f90:	e6 e4       	ldi	r30, 0x46	; 70
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	91 81       	ldd	r25, Z+1	; 0x01
}
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     fa6:	ec e4       	ldi	r30, 0x4C	; 76
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	11 82       	std	Z+1, r1	; 0x01
     fac:	10 82       	st	Z, r1
}
     fae:	cf 91       	pop	r28
     fb0:	df 91       	pop	r29
     fb2:	08 95       	ret

00000fb4 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
     fbc:	ef e4       	ldi	r30, 0x4F	; 79
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	10 82       	st	Z, r1
	TCCR1B = 0;
     fc2:	ee e4       	ldi	r30, 0x4E	; 78
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	10 82       	st	Z, r1
	TCNT1 = 0;
     fc8:	ec e4       	ldi	r30, 0x4C	; 76
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	11 82       	std	Z+1, r1	; 0x01
     fce:	10 82       	st	Z, r1
	ICR1 = 0;
     fd0:	e6 e4       	ldi	r30, 0x46	; 70
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	11 82       	std	Z+1, r1	; 0x01
     fd6:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
     fd8:	a9 e5       	ldi	r26, 0x59	; 89
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e9 e5       	ldi	r30, 0x59	; 89
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	8f 7d       	andi	r24, 0xDF	; 223
     fe4:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
     fe6:	10 92 93 01 	sts	0x0193, r1
     fea:	10 92 92 01 	sts	0x0192, r1
}
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <GPIO_setupPinDirection+0x6>
     ffa:	00 d0       	rcall	.+0      	; 0xffc <GPIO_setupPinDirection+0x8>
     ffc:	0f 92       	push	r0
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	6a 83       	std	Y+2, r22	; 0x02
    1006:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	88 30       	cpi	r24, 0x08	; 8
    100c:	08 f0       	brcs	.+2      	; 0x1010 <GPIO_setupPinDirection+0x1c>
    100e:	d5 c0       	rjmp	.+426    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	84 30       	cpi	r24, 0x04	; 4
    1014:	08 f0       	brcs	.+2      	; 0x1018 <GPIO_setupPinDirection+0x24>
    1016:	d1 c0       	rjmp	.+418    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3d 83       	std	Y+5, r19	; 0x05
    1020:	2c 83       	std	Y+4, r18	; 0x04
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	91 05       	cpc	r25, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <GPIO_setupPinDirection+0x3a>
    102c:	43 c0       	rjmp	.+134    	; 0x10b4 <GPIO_setupPinDirection+0xc0>
    102e:	2c 81       	ldd	r18, Y+4	; 0x04
    1030:	3d 81       	ldd	r19, Y+5	; 0x05
    1032:	22 30       	cpi	r18, 0x02	; 2
    1034:	31 05       	cpc	r19, r1
    1036:	2c f4       	brge	.+10     	; 0x1042 <GPIO_setupPinDirection+0x4e>
    1038:	8c 81       	ldd	r24, Y+4	; 0x04
    103a:	9d 81       	ldd	r25, Y+5	; 0x05
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	71 f0       	breq	.+28     	; 0x105c <GPIO_setupPinDirection+0x68>
    1040:	bc c0       	rjmp	.+376    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
    1042:	2c 81       	ldd	r18, Y+4	; 0x04
    1044:	3d 81       	ldd	r19, Y+5	; 0x05
    1046:	22 30       	cpi	r18, 0x02	; 2
    1048:	31 05       	cpc	r19, r1
    104a:	09 f4       	brne	.+2      	; 0x104e <GPIO_setupPinDirection+0x5a>
    104c:	5f c0       	rjmp	.+190    	; 0x110c <GPIO_setupPinDirection+0x118>
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	83 30       	cpi	r24, 0x03	; 3
    1054:	91 05       	cpc	r25, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <GPIO_setupPinDirection+0x66>
    1058:	85 c0       	rjmp	.+266    	; 0x1164 <GPIO_setupPinDirection+0x170>
    105a:	af c0       	rjmp	.+350    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	a1 f4       	brne	.+40     	; 0x108a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1062:	aa e3       	ldi	r26, 0x3A	; 58
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	ea e3       	ldi	r30, 0x3A	; 58
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <GPIO_setupPinDirection+0x8c>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <GPIO_setupPinDirection+0x88>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	98 c0       	rjmp	.+304    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    108a:	aa e3       	ldi	r26, 0x3A	; 58
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	ea e3       	ldi	r30, 0x3A	; 58
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <GPIO_setupPinDirection+0xb4>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <GPIO_setupPinDirection+0xb0>
    10ac:	80 95       	com	r24
    10ae:	84 23       	and	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	83 c0       	rjmp	.+262    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	a1 f4       	brne	.+40     	; 0x10e2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10ba:	a7 e3       	ldi	r26, 0x37	; 55
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e7 e3       	ldi	r30, 0x37	; 55
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_setupPinDirection+0xe4>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_setupPinDirection+0xe0>
    10dc:	84 2b       	or	r24, r20
    10de:	8c 93       	st	X, r24
    10e0:	6c c0       	rjmp	.+216    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    10e2:	a7 e3       	ldi	r26, 0x37	; 55
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e7 e3       	ldi	r30, 0x37	; 55
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 2e       	mov	r0, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <GPIO_setupPinDirection+0x10c>
    10fc:	88 0f       	add	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	0a 94       	dec	r0
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <GPIO_setupPinDirection+0x108>
    1104:	80 95       	com	r24
    1106:	84 23       	and	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	57 c0       	rjmp	.+174    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	a1 f4       	brne	.+40     	; 0x113a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1112:	a4 e3       	ldi	r26, 0x34	; 52
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e4 e3       	ldi	r30, 0x34	; 52
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <GPIO_setupPinDirection+0x13c>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <GPIO_setupPinDirection+0x138>
    1134:	84 2b       	or	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	40 c0       	rjmp	.+128    	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    113a:	a4 e3       	ldi	r26, 0x34	; 52
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e4 e3       	ldi	r30, 0x34	; 52
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <GPIO_setupPinDirection+0x164>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <GPIO_setupPinDirection+0x160>
    115c:	80 95       	com	r24
    115e:	84 23       	and	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	2b c0       	rjmp	.+86     	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	a1 f4       	brne	.+40     	; 0x1192 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    116a:	a1 e3       	ldi	r26, 0x31	; 49
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e1 e3       	ldi	r30, 0x31	; 49
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <GPIO_setupPinDirection+0x194>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <GPIO_setupPinDirection+0x190>
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	14 c0       	rjmp	.+40     	; 0x11ba <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1192:	a1 e3       	ldi	r26, 0x31	; 49
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e1 e3       	ldi	r30, 0x31	; 49
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <GPIO_setupPinDirection+0x1bc>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <GPIO_setupPinDirection+0x1b8>
    11b4:	80 95       	com	r24
    11b6:	84 23       	and	r24, r20
    11b8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <GPIO_writePin+0x6>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <GPIO_writePin+0x8>
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	6a 83       	std	Y+2, r22	; 0x02
    11dc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	88 30       	cpi	r24, 0x08	; 8
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <GPIO_writePin+0x1c>
    11e4:	d5 c0       	rjmp	.+426    	; 0x1390 <GPIO_writePin+0x1c6>
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	84 30       	cpi	r24, 0x04	; 4
    11ea:	08 f0       	brcs	.+2      	; 0x11ee <GPIO_writePin+0x24>
    11ec:	d1 c0       	rjmp	.+418    	; 0x1390 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	3d 83       	std	Y+5, r19	; 0x05
    11f6:	2c 83       	std	Y+4, r18	; 0x04
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	91 05       	cpc	r25, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <GPIO_writePin+0x3a>
    1202:	43 c0       	rjmp	.+134    	; 0x128a <GPIO_writePin+0xc0>
    1204:	2c 81       	ldd	r18, Y+4	; 0x04
    1206:	3d 81       	ldd	r19, Y+5	; 0x05
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	2c f4       	brge	.+10     	; 0x1218 <GPIO_writePin+0x4e>
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	71 f0       	breq	.+28     	; 0x1232 <GPIO_writePin+0x68>
    1216:	bc c0       	rjmp	.+376    	; 0x1390 <GPIO_writePin+0x1c6>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	09 f4       	brne	.+2      	; 0x1224 <GPIO_writePin+0x5a>
    1222:	5f c0       	rjmp	.+190    	; 0x12e2 <GPIO_writePin+0x118>
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	83 30       	cpi	r24, 0x03	; 3
    122a:	91 05       	cpc	r25, r1
    122c:	09 f4       	brne	.+2      	; 0x1230 <GPIO_writePin+0x66>
    122e:	85 c0       	rjmp	.+266    	; 0x133a <GPIO_writePin+0x170>
    1230:	af c0       	rjmp	.+350    	; 0x1390 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	a1 f4       	brne	.+40     	; 0x1260 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1238:	ab e3       	ldi	r26, 0x3B	; 59
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	eb e3       	ldi	r30, 0x3B	; 59
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <GPIO_writePin+0x8c>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <GPIO_writePin+0x88>
    125a:	84 2b       	or	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	98 c0       	rjmp	.+304    	; 0x1390 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1260:	ab e3       	ldi	r26, 0x3B	; 59
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	eb e3       	ldi	r30, 0x3B	; 59
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <GPIO_writePin+0xb4>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <GPIO_writePin+0xb0>
    1282:	80 95       	com	r24
    1284:	84 23       	and	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	83 c0       	rjmp	.+262    	; 0x1390 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	a1 f4       	brne	.+40     	; 0x12b8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1290:	a8 e3       	ldi	r26, 0x38	; 56
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e8 e3       	ldi	r30, 0x38	; 56
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <GPIO_writePin+0xe4>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <GPIO_writePin+0xe0>
    12b2:	84 2b       	or	r24, r20
    12b4:	8c 93       	st	X, r24
    12b6:	6c c0       	rjmp	.+216    	; 0x1390 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12b8:	a8 e3       	ldi	r26, 0x38	; 56
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e8 e3       	ldi	r30, 0x38	; 56
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <GPIO_writePin+0x10c>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <GPIO_writePin+0x108>
    12da:	80 95       	com	r24
    12dc:	84 23       	and	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	57 c0       	rjmp	.+174    	; 0x1390 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	a1 f4       	brne	.+40     	; 0x1310 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12e8:	a5 e3       	ldi	r26, 0x35	; 53
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e5 e3       	ldi	r30, 0x35	; 53
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <GPIO_writePin+0x13c>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <GPIO_writePin+0x138>
    130a:	84 2b       	or	r24, r20
    130c:	8c 93       	st	X, r24
    130e:	40 c0       	rjmp	.+128    	; 0x1390 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1310:	a5 e3       	ldi	r26, 0x35	; 53
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e5 e3       	ldi	r30, 0x35	; 53
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <GPIO_writePin+0x164>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <GPIO_writePin+0x160>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	2b c0       	rjmp	.+86     	; 0x1390 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	a1 f4       	brne	.+40     	; 0x1368 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1340:	a2 e3       	ldi	r26, 0x32	; 50
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e2 e3       	ldi	r30, 0x32	; 50
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <GPIO_writePin+0x194>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <GPIO_writePin+0x190>
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1368:	a2 e3       	ldi	r26, 0x32	; 50
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e2 e3       	ldi	r30, 0x32	; 50
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <GPIO_writePin+0x1bc>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <GPIO_writePin+0x1b8>
    138a:	80 95       	com	r24
    138c:	84 23       	and	r24, r20
    138e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <GPIO_readPin+0x6>
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <GPIO_readPin+0x8>
    13a8:	0f 92       	push	r0
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	8a 83       	std	Y+2, r24	; 0x02
    13b0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    13b2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	88 30       	cpi	r24, 0x08	; 8
    13b8:	08 f0       	brcs	.+2      	; 0x13bc <GPIO_readPin+0x1c>
    13ba:	84 c0       	rjmp	.+264    	; 0x14c4 <GPIO_readPin+0x124>
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	84 30       	cpi	r24, 0x04	; 4
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <GPIO_readPin+0x24>
    13c2:	80 c0       	rjmp	.+256    	; 0x14c4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3d 83       	std	Y+5, r19	; 0x05
    13cc:	2c 83       	std	Y+4, r18	; 0x04
    13ce:	4c 81       	ldd	r20, Y+4	; 0x04
    13d0:	5d 81       	ldd	r21, Y+5	; 0x05
    13d2:	41 30       	cpi	r20, 0x01	; 1
    13d4:	51 05       	cpc	r21, r1
    13d6:	79 f1       	breq	.+94     	; 0x1436 <GPIO_readPin+0x96>
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	82 30       	cpi	r24, 0x02	; 2
    13de:	91 05       	cpc	r25, r1
    13e0:	34 f4       	brge	.+12     	; 0x13ee <GPIO_readPin+0x4e>
    13e2:	2c 81       	ldd	r18, Y+4	; 0x04
    13e4:	3d 81       	ldd	r19, Y+5	; 0x05
    13e6:	21 15       	cp	r18, r1
    13e8:	31 05       	cpc	r19, r1
    13ea:	69 f0       	breq	.+26     	; 0x1406 <GPIO_readPin+0x66>
    13ec:	6b c0       	rjmp	.+214    	; 0x14c4 <GPIO_readPin+0x124>
    13ee:	4c 81       	ldd	r20, Y+4	; 0x04
    13f0:	5d 81       	ldd	r21, Y+5	; 0x05
    13f2:	42 30       	cpi	r20, 0x02	; 2
    13f4:	51 05       	cpc	r21, r1
    13f6:	b9 f1       	breq	.+110    	; 0x1466 <GPIO_readPin+0xc6>
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	91 05       	cpc	r25, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <GPIO_readPin+0x64>
    1402:	49 c0       	rjmp	.+146    	; 0x1496 <GPIO_readPin+0xf6>
    1404:	5f c0       	rjmp	.+190    	; 0x14c4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1406:	e9 e3       	ldi	r30, 0x39	; 57
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <GPIO_readPin+0x7e>
    141a:	55 95       	asr	r21
    141c:	47 95       	ror	r20
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <GPIO_readPin+0x7a>
    1422:	ca 01       	movw	r24, r20
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	90 70       	andi	r25, 0x00	; 0
    1428:	88 23       	and	r24, r24
    142a:	19 f0       	breq	.+6      	; 0x1432 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	49 c0       	rjmp	.+146    	; 0x14c4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1432:	19 82       	std	Y+1, r1	; 0x01
    1434:	47 c0       	rjmp	.+142    	; 0x14c4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1436:	e6 e3       	ldi	r30, 0x36	; 54
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	88 2f       	mov	r24, r24
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	a9 01       	movw	r20, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <GPIO_readPin+0xae>
    144a:	55 95       	asr	r21
    144c:	47 95       	ror	r20
    144e:	8a 95       	dec	r24
    1450:	e2 f7       	brpl	.-8      	; 0x144a <GPIO_readPin+0xaa>
    1452:	ca 01       	movw	r24, r20
    1454:	81 70       	andi	r24, 0x01	; 1
    1456:	90 70       	andi	r25, 0x00	; 0
    1458:	88 23       	and	r24, r24
    145a:	19 f0       	breq	.+6      	; 0x1462 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	31 c0       	rjmp	.+98     	; 0x14c4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1462:	19 82       	std	Y+1, r1	; 0x01
    1464:	2f c0       	rjmp	.+94     	; 0x14c4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1466:	e3 e3       	ldi	r30, 0x33	; 51
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a9 01       	movw	r20, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <GPIO_readPin+0xde>
    147a:	55 95       	asr	r21
    147c:	47 95       	ror	r20
    147e:	8a 95       	dec	r24
    1480:	e2 f7       	brpl	.-8      	; 0x147a <GPIO_readPin+0xda>
    1482:	ca 01       	movw	r24, r20
    1484:	81 70       	andi	r24, 0x01	; 1
    1486:	90 70       	andi	r25, 0x00	; 0
    1488:	88 23       	and	r24, r24
    148a:	19 f0       	breq	.+6      	; 0x1492 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	19 c0       	rjmp	.+50     	; 0x14c4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1492:	19 82       	std	Y+1, r1	; 0x01
    1494:	17 c0       	rjmp	.+46     	; 0x14c4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1496:	e0 e3       	ldi	r30, 0x30	; 48
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	88 2f       	mov	r24, r24
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a9 01       	movw	r20, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <GPIO_readPin+0x10e>
    14aa:	55 95       	asr	r21
    14ac:	47 95       	ror	r20
    14ae:	8a 95       	dec	r24
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <GPIO_readPin+0x10a>
    14b2:	ca 01       	movw	r24, r20
    14b4:	81 70       	andi	r24, 0x01	; 1
    14b6:	90 70       	andi	r25, 0x00	; 0
    14b8:	88 23       	and	r24, r24
    14ba:	19 f0       	breq	.+6      	; 0x14c2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    14c2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <GPIO_setupPortDirection+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <GPIO_setupPortDirection+0x8>
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	84 30       	cpi	r24, 0x04	; 4
    14ea:	90 f5       	brcc	.+100    	; 0x1550 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3c 83       	std	Y+4, r19	; 0x04
    14f4:	2b 83       	std	Y+3, r18	; 0x03
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	91 05       	cpc	r25, r1
    14fe:	d1 f0       	breq	.+52     	; 0x1534 <GPIO_setupPortDirection+0x5e>
    1500:	2b 81       	ldd	r18, Y+3	; 0x03
    1502:	3c 81       	ldd	r19, Y+4	; 0x04
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	2c f4       	brge	.+10     	; 0x1514 <GPIO_setupPortDirection+0x3e>
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	61 f0       	breq	.+24     	; 0x152a <GPIO_setupPortDirection+0x54>
    1512:	1e c0       	rjmp	.+60     	; 0x1550 <GPIO_setupPortDirection+0x7a>
    1514:	2b 81       	ldd	r18, Y+3	; 0x03
    1516:	3c 81       	ldd	r19, Y+4	; 0x04
    1518:	22 30       	cpi	r18, 0x02	; 2
    151a:	31 05       	cpc	r19, r1
    151c:	81 f0       	breq	.+32     	; 0x153e <GPIO_setupPortDirection+0x68>
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	81 f0       	breq	.+32     	; 0x1548 <GPIO_setupPortDirection+0x72>
    1528:	13 c0       	rjmp	.+38     	; 0x1550 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    152a:	ea e3       	ldi	r30, 0x3A	; 58
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	80 83       	st	Z, r24
    1532:	0e c0       	rjmp	.+28     	; 0x1550 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1534:	e7 e3       	ldi	r30, 0x37	; 55
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	80 83       	st	Z, r24
    153c:	09 c0       	rjmp	.+18     	; 0x1550 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    153e:	e4 e3       	ldi	r30, 0x34	; 52
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	80 83       	st	Z, r24
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1548:	e1 e3       	ldi	r30, 0x31	; 49
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <GPIO_writePort+0x6>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <GPIO_writePort+0x8>
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	84 30       	cpi	r24, 0x04	; 4
    1572:	90 f5       	brcc	.+100    	; 0x15d8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3c 83       	std	Y+4, r19	; 0x04
    157c:	2b 83       	std	Y+3, r18	; 0x03
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	91 05       	cpc	r25, r1
    1586:	d1 f0       	breq	.+52     	; 0x15bc <GPIO_writePort+0x5e>
    1588:	2b 81       	ldd	r18, Y+3	; 0x03
    158a:	3c 81       	ldd	r19, Y+4	; 0x04
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	2c f4       	brge	.+10     	; 0x159c <GPIO_writePort+0x3e>
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	61 f0       	breq	.+24     	; 0x15b2 <GPIO_writePort+0x54>
    159a:	1e c0       	rjmp	.+60     	; 0x15d8 <GPIO_writePort+0x7a>
    159c:	2b 81       	ldd	r18, Y+3	; 0x03
    159e:	3c 81       	ldd	r19, Y+4	; 0x04
    15a0:	22 30       	cpi	r18, 0x02	; 2
    15a2:	31 05       	cpc	r19, r1
    15a4:	81 f0       	breq	.+32     	; 0x15c6 <GPIO_writePort+0x68>
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	83 30       	cpi	r24, 0x03	; 3
    15ac:	91 05       	cpc	r25, r1
    15ae:	81 f0       	breq	.+32     	; 0x15d0 <GPIO_writePort+0x72>
    15b0:	13 c0       	rjmp	.+38     	; 0x15d8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15b2:	eb e3       	ldi	r30, 0x3B	; 59
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	80 83       	st	Z, r24
    15ba:	0e c0       	rjmp	.+28     	; 0x15d8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15bc:	e8 e3       	ldi	r30, 0x38	; 56
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	80 83       	st	Z, r24
    15c4:	09 c0       	rjmp	.+18     	; 0x15d8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15c6:	e5 e3       	ldi	r30, 0x35	; 53
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	80 83       	st	Z, r24
    15ce:	04 c0       	rjmp	.+8      	; 0x15d8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15d0:	e2 e3       	ldi	r30, 0x32	; 50
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	80 83       	st	Z, r24
			break;
		}
	}
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <GPIO_readPort+0x6>
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <GPIO_readPort+0x8>
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    15f4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	84 30       	cpi	r24, 0x04	; 4
    15fa:	90 f5       	brcc	.+100    	; 0x1660 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	3c 83       	std	Y+4, r19	; 0x04
    1604:	2b 83       	std	Y+3, r18	; 0x03
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	91 05       	cpc	r25, r1
    160e:	d1 f0       	breq	.+52     	; 0x1644 <GPIO_readPort+0x5e>
    1610:	2b 81       	ldd	r18, Y+3	; 0x03
    1612:	3c 81       	ldd	r19, Y+4	; 0x04
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	2c f4       	brge	.+10     	; 0x1624 <GPIO_readPort+0x3e>
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	61 f0       	breq	.+24     	; 0x163a <GPIO_readPort+0x54>
    1622:	1e c0       	rjmp	.+60     	; 0x1660 <GPIO_readPort+0x7a>
    1624:	2b 81       	ldd	r18, Y+3	; 0x03
    1626:	3c 81       	ldd	r19, Y+4	; 0x04
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	81 f0       	breq	.+32     	; 0x164e <GPIO_readPort+0x68>
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	91 05       	cpc	r25, r1
    1636:	81 f0       	breq	.+32     	; 0x1658 <GPIO_readPort+0x72>
    1638:	13 c0       	rjmp	.+38     	; 0x1660 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    163a:	e9 e3       	ldi	r30, 0x39	; 57
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	0e c0       	rjmp	.+28     	; 0x1660 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1644:	e6 e3       	ldi	r30, 0x36	; 54
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	09 c0       	rjmp	.+18     	; 0x1660 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    164e:	e3 e3       	ldi	r30, 0x33	; 51
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	04 c0       	rjmp	.+8      	; 0x1660 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1658:	e0 e3       	ldi	r30, 0x30	; 48
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1660:	89 81       	ldd	r24, Y+1	; 0x01
}
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <Ultrasonic_init>:
uint16 g_timePeriodPlusHigh = 0;

ICU_ConfigType US_CONFIG = {F_CPU_8, RAISING};

void Ultrasonic_init(void)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
	ICU_init(&US_CONFIG);
    1678:	8f e8       	ldi	r24, 0x8F	; 143
    167a:	91 e0       	ldi	r25, 0x01	; 1
    167c:	0e 94 4a 07 	call	0xe94	; 0xe94 <ICU_init>
	ICU_setCallBack(&Ultrasonic_edgeProcessing);
    1680:	85 ef       	ldi	r24, 0xF5	; 245
    1682:	9c e0       	ldi	r25, 0x0C	; 12
    1684:	0e 94 93 07 	call	0xf26	; 0xf26 <ICU_setCallBack>
	GPIO_setupPinDirection(TRIG_PORT, TRIG_PIN, PIN_OUTPUT);
    1688:	83 e0       	ldi	r24, 0x03	; 3
    168a:	67 e0       	ldi	r22, 0x07	; 7
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(ECHO_PORT, ECHO_PIN, PIN_INPUT);
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	66 e0       	ldi	r22, 0x06	; 6
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>

}
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <Ultrasonic_Trigger>:

void Ultrasonic_Trigger(void)
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	68 97       	sbiw	r28, 0x18	; 24
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
	ICU_clearTimerValue();
    16b6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <ICU_clearTimerValue>
	GPIO_writePin(TRIG_PORT, TRIG_PIN, LOGIC_HIGH);
    16ba:	83 e0       	ldi	r24, 0x03	; 3
    16bc:	67 e0       	ldi	r22, 0x07	; 7
    16be:	41 e0       	ldi	r20, 0x01	; 1
    16c0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	a0 e2       	ldi	r26, 0x20	; 32
    16ca:	b1 e4       	ldi	r27, 0x41	; 65
    16cc:	8d 8b       	std	Y+21, r24	; 0x15
    16ce:	9e 8b       	std	Y+22, r25	; 0x16
    16d0:	af 8b       	std	Y+23, r26	; 0x17
    16d2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16d4:	6d 89       	ldd	r22, Y+21	; 0x15
    16d6:	7e 89       	ldd	r23, Y+22	; 0x16
    16d8:	8f 89       	ldd	r24, Y+23	; 0x17
    16da:	98 8d       	ldd	r25, Y+24	; 0x18
    16dc:	2b ea       	ldi	r18, 0xAB	; 171
    16de:	3a ea       	ldi	r19, 0xAA	; 170
    16e0:	4a e2       	ldi	r20, 0x2A	; 42
    16e2:	50 e4       	ldi	r21, 0x40	; 64
    16e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	89 8b       	std	Y+17, r24	; 0x11
    16ee:	9a 8b       	std	Y+18, r25	; 0x12
    16f0:	ab 8b       	std	Y+19, r26	; 0x13
    16f2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    16f4:	69 89       	ldd	r22, Y+17	; 0x11
    16f6:	7a 89       	ldd	r23, Y+18	; 0x12
    16f8:	8b 89       	ldd	r24, Y+19	; 0x13
    16fa:	9c 89       	ldd	r25, Y+20	; 0x14
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	40 e8       	ldi	r20, 0x80	; 128
    1702:	5f e3       	ldi	r21, 0x3F	; 63
    1704:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1708:	88 23       	and	r24, r24
    170a:	1c f4       	brge	.+6      	; 0x1712 <Ultrasonic_Trigger+0x70>
		__ticks = 1;
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	88 8b       	std	Y+16, r24	; 0x10
    1710:	91 c0       	rjmp	.+290    	; 0x1834 <Ultrasonic_Trigger+0x192>
	else if (__tmp > 255)
    1712:	69 89       	ldd	r22, Y+17	; 0x11
    1714:	7a 89       	ldd	r23, Y+18	; 0x12
    1716:	8b 89       	ldd	r24, Y+19	; 0x13
    1718:	9c 89       	ldd	r25, Y+20	; 0x14
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	53 e4       	ldi	r21, 0x43	; 67
    1722:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	0c f0       	brlt	.+2      	; 0x172c <Ultrasonic_Trigger+0x8a>
    172a:	7b c0       	rjmp	.+246    	; 0x1822 <Ultrasonic_Trigger+0x180>
	{
		_delay_ms(__us / 1000.0);
    172c:	6d 89       	ldd	r22, Y+21	; 0x15
    172e:	7e 89       	ldd	r23, Y+22	; 0x16
    1730:	8f 89       	ldd	r24, Y+23	; 0x17
    1732:	98 8d       	ldd	r25, Y+24	; 0x18
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	4a e7       	ldi	r20, 0x7A	; 122
    173a:	54 e4       	ldi	r21, 0x44	; 68
    173c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	8c 87       	std	Y+12, r24	; 0x0c
    1746:	9d 87       	std	Y+13, r25	; 0x0d
    1748:	ae 87       	std	Y+14, r26	; 0x0e
    174a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174c:	6c 85       	ldd	r22, Y+12	; 0x0c
    174e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1750:	8e 85       	ldd	r24, Y+14	; 0x0e
    1752:	9f 85       	ldd	r25, Y+15	; 0x0f
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	4a ef       	ldi	r20, 0xFA	; 250
    175a:	54 e4       	ldi	r21, 0x44	; 68
    175c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	88 87       	std	Y+8, r24	; 0x08
    1766:	99 87       	std	Y+9, r25	; 0x09
    1768:	aa 87       	std	Y+10, r26	; 0x0a
    176a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    176c:	68 85       	ldd	r22, Y+8	; 0x08
    176e:	79 85       	ldd	r23, Y+9	; 0x09
    1770:	8a 85       	ldd	r24, Y+10	; 0x0a
    1772:	9b 85       	ldd	r25, Y+11	; 0x0b
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e8       	ldi	r20, 0x80	; 128
    177a:	5f e3       	ldi	r21, 0x3F	; 63
    177c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1780:	88 23       	and	r24, r24
    1782:	2c f4       	brge	.+10     	; 0x178e <Ultrasonic_Trigger+0xec>
		__ticks = 1;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9f 83       	std	Y+7, r25	; 0x07
    178a:	8e 83       	std	Y+6, r24	; 0x06
    178c:	3f c0       	rjmp	.+126    	; 0x180c <Ultrasonic_Trigger+0x16a>
	else if (__tmp > 65535)
    178e:	68 85       	ldd	r22, Y+8	; 0x08
    1790:	79 85       	ldd	r23, Y+9	; 0x09
    1792:	8a 85       	ldd	r24, Y+10	; 0x0a
    1794:	9b 85       	ldd	r25, Y+11	; 0x0b
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	3f ef       	ldi	r19, 0xFF	; 255
    179a:	4f e7       	ldi	r20, 0x7F	; 127
    179c:	57 e4       	ldi	r21, 0x47	; 71
    179e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17a2:	18 16       	cp	r1, r24
    17a4:	4c f5       	brge	.+82     	; 0x17f8 <Ultrasonic_Trigger+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a6:	6c 85       	ldd	r22, Y+12	; 0x0c
    17a8:	7d 85       	ldd	r23, Y+13	; 0x0d
    17aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ac:	9f 85       	ldd	r25, Y+15	; 0x0f
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e2       	ldi	r20, 0x20	; 32
    17b4:	51 e4       	ldi	r21, 0x41	; 65
    17b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	bc 01       	movw	r22, r24
    17c0:	cd 01       	movw	r24, r26
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	9f 83       	std	Y+7, r25	; 0x07
    17cc:	8e 83       	std	Y+6, r24	; 0x06
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <Ultrasonic_Trigger+0x14c>
    17d0:	88 ec       	ldi	r24, 0xC8	; 200
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9d 83       	std	Y+5, r25	; 0x05
    17d6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	9d 81       	ldd	r25, Y+5	; 0x05
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <Ultrasonic_Trigger+0x13a>
    17e0:	9d 83       	std	Y+5, r25	; 0x05
    17e2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e4:	8e 81       	ldd	r24, Y+6	; 0x06
    17e6:	9f 81       	ldd	r25, Y+7	; 0x07
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	9f 83       	std	Y+7, r25	; 0x07
    17ec:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ee:	8e 81       	ldd	r24, Y+6	; 0x06
    17f0:	9f 81       	ldd	r25, Y+7	; 0x07
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	69 f7       	brne	.-38     	; 0x17d0 <Ultrasonic_Trigger+0x12e>
    17f6:	24 c0       	rjmp	.+72     	; 0x1840 <Ultrasonic_Trigger+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f8:	68 85       	ldd	r22, Y+8	; 0x08
    17fa:	79 85       	ldd	r23, Y+9	; 0x09
    17fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	9f 83       	std	Y+7, r25	; 0x07
    180a:	8e 83       	std	Y+6, r24	; 0x06
    180c:	8e 81       	ldd	r24, Y+6	; 0x06
    180e:	9f 81       	ldd	r25, Y+7	; 0x07
    1810:	9b 83       	std	Y+3, r25	; 0x03
    1812:	8a 83       	std	Y+2, r24	; 0x02
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	9b 81       	ldd	r25, Y+3	; 0x03
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <Ultrasonic_Trigger+0x176>
    181c:	9b 83       	std	Y+3, r25	; 0x03
    181e:	8a 83       	std	Y+2, r24	; 0x02
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <Ultrasonic_Trigger+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1822:	69 89       	ldd	r22, Y+17	; 0x11
    1824:	7a 89       	ldd	r23, Y+18	; 0x12
    1826:	8b 89       	ldd	r24, Y+19	; 0x13
    1828:	9c 89       	ldd	r25, Y+20	; 0x14
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	88 8b       	std	Y+16, r24	; 0x10
    1834:	88 89       	ldd	r24, Y+16	; 0x10
    1836:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	8a 95       	dec	r24
    183c:	f1 f7       	brne	.-4      	; 0x183a <Ultrasonic_Trigger+0x198>
    183e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10); // Create a 10 microsecond delay
	GPIO_writePin(TRIG_PORT, TRIG_PIN, LOGIC_LOW);
    1840:	83 e0       	ldi	r24, 0x03	; 3
    1842:	67 e0       	ldi	r22, 0x07	; 7
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    184a:	68 96       	adiw	r28, 0x18	; 24
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <Ultrasonic_readDistance>:

uint16 Ultrasonic_readDistance(void)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	cd b7       	in	r28, 0x3d	; 61
    1862:	de b7       	in	r29, 0x3e	; 62
    1864:	66 97       	sbiw	r28, 0x16	; 22
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    Ultrasonic_Trigger();
    1870:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <Ultrasonic_Trigger>
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a0 e7       	ldi	r26, 0x70	; 112
    187a:	b1 e4       	ldi	r27, 0x41	; 65
    187c:	8b 87       	std	Y+11, r24	; 0x0b
    187e:	9c 87       	std	Y+12, r25	; 0x0c
    1880:	ad 87       	std	Y+13, r26	; 0x0d
    1882:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1884:	6b 85       	ldd	r22, Y+11	; 0x0b
    1886:	7c 85       	ldd	r23, Y+12	; 0x0c
    1888:	8d 85       	ldd	r24, Y+13	; 0x0d
    188a:	9e 85       	ldd	r25, Y+14	; 0x0e
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	4a ef       	ldi	r20, 0xFA	; 250
    1892:	54 e4       	ldi	r21, 0x44	; 68
    1894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	8f 83       	std	Y+7, r24	; 0x07
    189e:	98 87       	std	Y+8, r25	; 0x08
    18a0:	a9 87       	std	Y+9, r26	; 0x09
    18a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18a4:	6f 81       	ldd	r22, Y+7	; 0x07
    18a6:	78 85       	ldd	r23, Y+8	; 0x08
    18a8:	89 85       	ldd	r24, Y+9	; 0x09
    18aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e8       	ldi	r20, 0x80	; 128
    18b2:	5f e3       	ldi	r21, 0x3F	; 63
    18b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18b8:	88 23       	and	r24, r24
    18ba:	2c f4       	brge	.+10     	; 0x18c6 <Ultrasonic_readDistance+0x6a>
		__ticks = 1;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	8d 83       	std	Y+5, r24	; 0x05
    18c4:	3f c0       	rjmp	.+126    	; 0x1944 <Ultrasonic_readDistance+0xe8>
	else if (__tmp > 65535)
    18c6:	6f 81       	ldd	r22, Y+7	; 0x07
    18c8:	78 85       	ldd	r23, Y+8	; 0x08
    18ca:	89 85       	ldd	r24, Y+9	; 0x09
    18cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	3f ef       	ldi	r19, 0xFF	; 255
    18d2:	4f e7       	ldi	r20, 0x7F	; 127
    18d4:	57 e4       	ldi	r21, 0x47	; 71
    18d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18da:	18 16       	cp	r1, r24
    18dc:	4c f5       	brge	.+82     	; 0x1930 <Ultrasonic_readDistance+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18de:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e2       	ldi	r20, 0x20	; 32
    18ec:	51 e4       	ldi	r21, 0x41	; 65
    18ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	bc 01       	movw	r22, r24
    18f8:	cd 01       	movw	r24, r26
    18fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	9e 83       	std	Y+6, r25	; 0x06
    1904:	8d 83       	std	Y+5, r24	; 0x05
    1906:	0f c0       	rjmp	.+30     	; 0x1926 <Ultrasonic_readDistance+0xca>
    1908:	88 ec       	ldi	r24, 0xC8	; 200
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9c 83       	std	Y+4, r25	; 0x04
    190e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <Ultrasonic_readDistance+0xb8>
    1918:	9c 83       	std	Y+4, r25	; 0x04
    191a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191c:	8d 81       	ldd	r24, Y+5	; 0x05
    191e:	9e 81       	ldd	r25, Y+6	; 0x06
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	9e 83       	std	Y+6, r25	; 0x06
    1924:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1926:	8d 81       	ldd	r24, Y+5	; 0x05
    1928:	9e 81       	ldd	r25, Y+6	; 0x06
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	69 f7       	brne	.-38     	; 0x1908 <Ultrasonic_readDistance+0xac>
    192e:	14 c0       	rjmp	.+40     	; 0x1958 <Ultrasonic_readDistance+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1930:	6f 81       	ldd	r22, Y+7	; 0x07
    1932:	78 85       	ldd	r23, Y+8	; 0x08
    1934:	89 85       	ldd	r24, Y+9	; 0x09
    1936:	9a 85       	ldd	r25, Y+10	; 0x0a
    1938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	9e 83       	std	Y+6, r25	; 0x06
    1942:	8d 83       	std	Y+5, r24	; 0x05
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
    1946:	9e 81       	ldd	r25, Y+6	; 0x06
    1948:	9a 83       	std	Y+2, r25	; 0x02
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	9a 81       	ldd	r25, Y+2	; 0x02
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <Ultrasonic_readDistance+0xf4>
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	89 83       	std	Y+1, r24	; 0x01

    // Wait a short time for the measurement to complete (e.g., 15 ms)
    _delay_ms(15);

    float calculatedDistance = (g_timeHigh * 0.0343) / 2.0; // Using float for higher precision
    1958:	80 91 95 01 	lds	r24, 0x0195
    195c:	90 91 96 01 	lds	r25, 0x0196
    1960:	cc 01       	movw	r24, r24
    1962:	a0 e0       	ldi	r26, 0x00	; 0
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	bc 01       	movw	r22, r24
    1968:	cd 01       	movw	r24, r26
    196a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	28 e2       	ldi	r18, 0x28	; 40
    1978:	3e e7       	ldi	r19, 0x7E	; 126
    197a:	4c e0       	ldi	r20, 0x0C	; 12
    197c:	5d e3       	ldi	r21, 0x3D	; 61
    197e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	50 e4       	ldi	r21, 0x40	; 64
    1992:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	8b 8b       	std	Y+19, r24	; 0x13
    199c:	9c 8b       	std	Y+20, r25	; 0x14
    199e:	ad 8b       	std	Y+21, r26	; 0x15
    19a0:	be 8b       	std	Y+22, r27	; 0x16

    // Round the calculated distance to the nearest integer
    uint32 distance = (uint16)(calculatedDistance + 0.5); // Adding 0.5 for proper rounding
    19a2:	6b 89       	ldd	r22, Y+19	; 0x13
    19a4:	7c 89       	ldd	r23, Y+20	; 0x14
    19a6:	8d 89       	ldd	r24, Y+21	; 0x15
    19a8:	9e 89       	ldd	r25, Y+22	; 0x16
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	5f e3       	ldi	r21, 0x3F	; 63
    19b2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	bc 01       	movw	r22, r24
    19bc:	cd 01       	movw	r24, r26
    19be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	cc 01       	movw	r24, r24
    19c8:	a0 e0       	ldi	r26, 0x00	; 0
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	8f 87       	std	Y+15, r24	; 0x0f
    19ce:	98 8b       	std	Y+16, r25	; 0x10
    19d0:	a9 8b       	std	Y+17, r26	; 0x11
    19d2:	ba 8b       	std	Y+18, r27	; 0x12
    //uint16 distance = (g_timeHigh * 0.0343) / 2.0;

    return distance;
    19d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d6:	98 89       	ldd	r25, Y+16	; 0x10
}
    19d8:	66 96       	adiw	r28, 0x16	; 22
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <Ultrasonic_edgeProcessing>:

void Ultrasonic_edgeProcessing(void)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    if (g_edgeCount == 0)
    19f2:	80 91 94 01 	lds	r24, 0x0194
    19f6:	88 23       	and	r24, r24
    19f8:	49 f4       	brne	.+18     	; 0x1a0c <Ultrasonic_edgeProcessing+0x22>
    {
        // First rising edge detected, start timing
        ICU_clearTimerValue();
    19fa:	0e 94 cf 07 	call	0xf9e	; 0xf9e <ICU_clearTimerValue>
        ICU_setEdgeDetectionType(FALLING);  // Look for falling edge next
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	0e 94 a5 07 	call	0xf4a	; 0xf4a <ICU_setEdgeDetectionType>
        g_edgeCount = 1;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	80 93 94 01 	sts	0x0194, r24
    1a0a:	0f c0       	rjmp	.+30     	; 0x1a2a <Ultrasonic_edgeProcessing+0x40>
    }
    else if (g_edgeCount == 1)
    1a0c:	80 91 94 01 	lds	r24, 0x0194
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	59 f4       	brne	.+22     	; 0x1a2a <Ultrasonic_edgeProcessing+0x40>
    {
        // Falling edge detected, capture pulse duration
        g_timeHigh = ICU_getInputCaptureValue();
    1a14:	0e 94 c4 07 	call	0xf88	; 0xf88 <ICU_getInputCaptureValue>
    1a18:	90 93 96 01 	sts	0x0196, r25
    1a1c:	80 93 95 01 	sts	0x0195, r24
        g_edgeCount = 0;  // Reset edge count for the next pulse
    1a20:	10 92 94 01 	sts	0x0194, r1
        ICU_setEdgeDetectionType(RAISING);  // Set edge detection back to rising for the next trigger
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	0e 94 a5 07 	call	0xf4a	; 0xf4a <ICU_setEdgeDetectionType>
    }
}
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <LED_Init>:
#include "../../MCAL/GPIO/gpio.h"
#include "../../LIB/std_types.h"
#include "../../LIB/common_macros.h"

void LED_Init(void)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LED_RED_PORT,LED_RED_PIN,PIN_OUTPUT);
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	41 e0       	ldi	r20, 0x01	; 1
    1a3e:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_GREEN_PORT,LED_GREEN_PIN,PIN_OUTPUT);
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	61 e0       	ldi	r22, 0x01	; 1
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_BLUE_PORT,LED_BLUE_PIN,PIN_OUTPUT);
    1a4c:	82 e0       	ldi	r24, 0x02	; 2
    1a4e:	62 e0       	ldi	r22, 0x02	; 2
    1a50:	41 e0       	ldi	r20, 0x01	; 1
    1a52:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
}
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <LED_On>:


void LED_On(uint8 LED_ID)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	0f 92       	push	r0
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	89 83       	std	Y+1, r24	; 0x01
	if(LED_ID == LED_RED)
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	88 23       	and	r24, r24
    1a6c:	31 f4       	brne	.+12     	; 0x1a7a <LED_On+0x1e>
	{
		GPIO_writePin(LED_RED_PORT,LED_RED_PIN,LOGIC_HIGH);
    1a6e:	82 e0       	ldi	r24, 0x02	; 2
    1a70:	60 e0       	ldi	r22, 0x00	; 0
    1a72:	41 e0       	ldi	r20, 0x01	; 1
    1a74:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1a78:	11 c0       	rjmp	.+34     	; 0x1a9c <LED_On+0x40>
	}
	else if(LED_ID == LED_GREEN)
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	31 f4       	brne	.+12     	; 0x1a8c <LED_On+0x30>
	{
		GPIO_writePin(LED_GREEN_PORT,LED_GREEN_PIN,LOGIC_HIGH);
    1a80:	82 e0       	ldi	r24, 0x02	; 2
    1a82:	61 e0       	ldi	r22, 0x01	; 1
    1a84:	41 e0       	ldi	r20, 0x01	; 1
    1a86:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1a8a:	08 c0       	rjmp	.+16     	; 0x1a9c <LED_On+0x40>
	}
	else if(LED_ID == LED_BLUE)
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	82 30       	cpi	r24, 0x02	; 2
    1a90:	29 f4       	brne	.+10     	; 0x1a9c <LED_On+0x40>
	{
		GPIO_writePin(LED_BLUE_PORT,LED_BLUE_PIN,LOGIC_HIGH);
    1a92:	82 e0       	ldi	r24, 0x02	; 2
    1a94:	62 e0       	ldi	r22, 0x02	; 2
    1a96:	41 e0       	ldi	r20, 0x01	; 1
    1a98:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	}

}
    1a9c:	0f 90       	pop	r0
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <LED_Off>:
void LED_Off(uint8 LED_ID)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	0f 92       	push	r0
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	89 83       	std	Y+1, r24	; 0x01
	if(LED_ID == LED_RED)
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	88 23       	and	r24, r24
    1ab4:	31 f4       	brne	.+12     	; 0x1ac2 <LED_Off+0x1e>
	{
		GPIO_writePin(LED_RED_PORT,LED_RED_PIN,LOGIC_LOW);
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
    1ab8:	60 e0       	ldi	r22, 0x00	; 0
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1ac0:	11 c0       	rjmp	.+34     	; 0x1ae4 <LED_Off+0x40>
	}
	else if(LED_ID == LED_GREEN)
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	81 30       	cpi	r24, 0x01	; 1
    1ac6:	31 f4       	brne	.+12     	; 0x1ad4 <LED_Off+0x30>
	{
		GPIO_writePin(LED_GREEN_PORT,LED_GREEN_PIN,LOGIC_LOW);
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	40 e0       	ldi	r20, 0x00	; 0
    1ace:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1ad2:	08 c0       	rjmp	.+16     	; 0x1ae4 <LED_Off+0x40>
	}
	else if(LED_ID == LED_BLUE)
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	82 30       	cpi	r24, 0x02	; 2
    1ad8:	29 f4       	brne	.+10     	; 0x1ae4 <LED_Off+0x40>
	{
		GPIO_writePin(LED_BLUE_PORT,LED_BLUE_PIN,LOGIC_LOW);
    1ada:	82 e0       	ldi	r24, 0x02	; 2
    1adc:	62 e0       	ldi	r22, 0x02	; 2
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	}
}
    1ae4:	0f 90       	pop	r0
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	2e 97       	sbiw	r28, 0x0e	; 14
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	61 e0       	ldi	r22, 0x01	; 1
    1b04:	41 e0       	ldi	r20, 0x01	; 1
    1b06:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	62 e0       	ldi	r22, 0x02	; 2
    1b0e:	41 e0       	ldi	r20, 0x01	; 1
    1b10:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	a0 ea       	ldi	r26, 0xA0	; 160
    1b1a:	b1 e4       	ldi	r27, 0x41	; 65
    1b1c:	8b 87       	std	Y+11, r24	; 0x0b
    1b1e:	9c 87       	std	Y+12, r25	; 0x0c
    1b20:	ad 87       	std	Y+13, r26	; 0x0d
    1b22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	4a ef       	ldi	r20, 0xFA	; 250
    1b32:	54 e4       	ldi	r21, 0x44	; 68
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	8f 83       	std	Y+7, r24	; 0x07
    1b3e:	98 87       	std	Y+8, r25	; 0x08
    1b40:	a9 87       	std	Y+9, r26	; 0x09
    1b42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b44:	6f 81       	ldd	r22, Y+7	; 0x07
    1b46:	78 85       	ldd	r23, Y+8	; 0x08
    1b48:	89 85       	ldd	r24, Y+9	; 0x09
    1b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e8       	ldi	r20, 0x80	; 128
    1b52:	5f e3       	ldi	r21, 0x3F	; 63
    1b54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b58:	88 23       	and	r24, r24
    1b5a:	2c f4       	brge	.+10     	; 0x1b66 <LCD_init+0x7a>
		__ticks = 1;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	9e 83       	std	Y+6, r25	; 0x06
    1b62:	8d 83       	std	Y+5, r24	; 0x05
    1b64:	3f c0       	rjmp	.+126    	; 0x1be4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1b66:	6f 81       	ldd	r22, Y+7	; 0x07
    1b68:	78 85       	ldd	r23, Y+8	; 0x08
    1b6a:	89 85       	ldd	r24, Y+9	; 0x09
    1b6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	3f ef       	ldi	r19, 0xFF	; 255
    1b72:	4f e7       	ldi	r20, 0x7F	; 127
    1b74:	57 e4       	ldi	r21, 0x47	; 71
    1b76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b7a:	18 16       	cp	r1, r24
    1b7c:	4c f5       	brge	.+82     	; 0x1bd0 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e2       	ldi	r20, 0x20	; 32
    1b8c:	51 e4       	ldi	r21, 0x41	; 65
    1b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	bc 01       	movw	r22, r24
    1b98:	cd 01       	movw	r24, r26
    1b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	9e 83       	std	Y+6, r25	; 0x06
    1ba4:	8d 83       	std	Y+5, r24	; 0x05
    1ba6:	0f c0       	rjmp	.+30     	; 0x1bc6 <LCD_init+0xda>
    1ba8:	88 ec       	ldi	r24, 0xC8	; 200
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9c 83       	std	Y+4, r25	; 0x04
    1bae:	8b 83       	std	Y+3, r24	; 0x03
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <LCD_init+0xc8>
    1bb8:	9c 83       	std	Y+4, r25	; 0x04
    1bba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	9e 83       	std	Y+6, r25	; 0x06
    1bc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	69 f7       	brne	.-38     	; 0x1ba8 <LCD_init+0xbc>
    1bce:	14 c0       	rjmp	.+40     	; 0x1bf8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd2:	78 85       	ldd	r23, Y+8	; 0x08
    1bd4:	89 85       	ldd	r24, Y+9	; 0x09
    1bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	9e 83       	std	Y+6, r25	; 0x06
    1be2:	8d 83       	std	Y+5, r24	; 0x05
    1be4:	8d 81       	ldd	r24, Y+5	; 0x05
    1be6:	9e 81       	ldd	r25, Y+6	; 0x06
    1be8:	9a 83       	std	Y+2, r25	; 0x02
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_init+0x104>
    1bf4:	9a 83       	std	Y+2, r25	; 0x02
    1bf6:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	63 e0       	ldi	r22, 0x03	; 3
    1bfc:	41 e0       	ldi	r20, 0x01	; 1
    1bfe:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	64 e0       	ldi	r22, 0x04	; 4
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	65 e0       	ldi	r22, 0x05	; 5
    1c10:	41 e0       	ldi	r20, 0x01	; 1
    1c12:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	66 e0       	ldi	r22, 0x06	; 6
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1c20:	83 e3       	ldi	r24, 0x33	; 51
    1c22:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1c26:	82 e3       	ldi	r24, 0x32	; 50
    1c28:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1c2c:	88 e2       	ldi	r24, 0x28	; 40
    1c2e:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c32:	8c e0       	ldi	r24, 0x0C	; 12
    1c34:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <LCD_sendCommand>
}
    1c3e:	2e 96       	adiw	r28, 0x0e	; 14
    1c40:	0f b6       	in	r0, 0x3f	; 63
    1c42:	f8 94       	cli
    1c44:	de bf       	out	0x3e, r29	; 62
    1c46:	0f be       	out	0x3f, r0	; 63
    1c48:	cd bf       	out	0x3d, r28	; 61
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1c50:	0f 93       	push	r16
    1c52:	1f 93       	push	r17
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	c3 56       	subi	r28, 0x63	; 99
    1c5e:	d0 40       	sbci	r29, 0x00	; 0
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	ed 59       	subi	r30, 0x9D	; 157
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	61 e0       	ldi	r22, 0x01	; 1
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e1 5a       	subi	r30, 0xA1	; 161
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a0 e8       	ldi	r26, 0x80	; 128
    1c88:	bf e3       	ldi	r27, 0x3F	; 63
    1c8a:	80 83       	st	Z, r24
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	a2 83       	std	Z+2, r26	; 0x02
    1c90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c92:	8e 01       	movw	r16, r28
    1c94:	05 5a       	subi	r16, 0xA5	; 165
    1c96:	1f 4f       	sbci	r17, 0xFF	; 255
    1c98:	fe 01       	movw	r30, r28
    1c9a:	e1 5a       	subi	r30, 0xA1	; 161
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	60 81       	ld	r22, Z
    1ca0:	71 81       	ldd	r23, Z+1	; 0x01
    1ca2:	82 81       	ldd	r24, Z+2	; 0x02
    1ca4:	93 81       	ldd	r25, Z+3	; 0x03
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	4a ef       	ldi	r20, 0xFA	; 250
    1cac:	54 e4       	ldi	r21, 0x44	; 68
    1cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	f8 01       	movw	r30, r16
    1cb8:	80 83       	st	Z, r24
    1cba:	91 83       	std	Z+1, r25	; 0x01
    1cbc:	a2 83       	std	Z+2, r26	; 0x02
    1cbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	e5 5a       	subi	r30, 0xA5	; 165
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	60 81       	ld	r22, Z
    1cc8:	71 81       	ldd	r23, Z+1	; 0x01
    1cca:	82 81       	ldd	r24, Z+2	; 0x02
    1ccc:	93 81       	ldd	r25, Z+3	; 0x03
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	44 f4       	brge	.+16     	; 0x1cee <LCD_sendCommand+0x9e>
		__ticks = 1;
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e7 5a       	subi	r30, 0xA7	; 167
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
    1cec:	64 c0       	rjmp	.+200    	; 0x1db6 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e5 5a       	subi	r30, 0xA5	; 165
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	60 81       	ld	r22, Z
    1cf6:	71 81       	ldd	r23, Z+1	; 0x01
    1cf8:	82 81       	ldd	r24, Z+2	; 0x02
    1cfa:	93 81       	ldd	r25, Z+3	; 0x03
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	3f ef       	ldi	r19, 0xFF	; 255
    1d00:	4f e7       	ldi	r20, 0x7F	; 127
    1d02:	57 e4       	ldi	r21, 0x47	; 71
    1d04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d08:	18 16       	cp	r1, r24
    1d0a:	0c f0       	brlt	.+2      	; 0x1d0e <LCD_sendCommand+0xbe>
    1d0c:	43 c0       	rjmp	.+134    	; 0x1d94 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0e:	fe 01       	movw	r30, r28
    1d10:	e1 5a       	subi	r30, 0xA1	; 161
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	60 81       	ld	r22, Z
    1d16:	71 81       	ldd	r23, Z+1	; 0x01
    1d18:	82 81       	ldd	r24, Z+2	; 0x02
    1d1a:	93 81       	ldd	r25, Z+3	; 0x03
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e2       	ldi	r20, 0x20	; 32
    1d22:	51 e4       	ldi	r21, 0x41	; 65
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	8e 01       	movw	r16, r28
    1d2e:	07 5a       	subi	r16, 0xA7	; 167
    1d30:	1f 4f       	sbci	r17, 0xFF	; 255
    1d32:	bc 01       	movw	r22, r24
    1d34:	cd 01       	movw	r24, r26
    1d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	f8 01       	movw	r30, r16
    1d40:	91 83       	std	Z+1, r25	; 0x01
    1d42:	80 83       	st	Z, r24
    1d44:	1f c0       	rjmp	.+62     	; 0x1d84 <LCD_sendCommand+0x134>
    1d46:	fe 01       	movw	r30, r28
    1d48:	e9 5a       	subi	r30, 0xA9	; 169
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	88 ec       	ldi	r24, 0xC8	; 200
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	91 83       	std	Z+1, r25	; 0x01
    1d52:	80 83       	st	Z, r24
    1d54:	fe 01       	movw	r30, r28
    1d56:	e9 5a       	subi	r30, 0xA9	; 169
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 81       	ld	r24, Z
    1d5c:	91 81       	ldd	r25, Z+1	; 0x01
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_sendCommand+0x10e>
    1d62:	fe 01       	movw	r30, r28
    1d64:	e9 5a       	subi	r30, 0xA9	; 169
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6c:	de 01       	movw	r26, r28
    1d6e:	a7 5a       	subi	r26, 0xA7	; 167
    1d70:	bf 4f       	sbci	r27, 0xFF	; 255
    1d72:	fe 01       	movw	r30, r28
    1d74:	e7 5a       	subi	r30, 0xA7	; 167
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	11 96       	adiw	r26, 0x01	; 1
    1d80:	9c 93       	st	X, r25
    1d82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d84:	fe 01       	movw	r30, r28
    1d86:	e7 5a       	subi	r30, 0xA7	; 167
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	80 81       	ld	r24, Z
    1d8c:	91 81       	ldd	r25, Z+1	; 0x01
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	d1 f6       	brne	.-76     	; 0x1d46 <LCD_sendCommand+0xf6>
    1d92:	27 c0       	rjmp	.+78     	; 0x1de2 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d94:	8e 01       	movw	r16, r28
    1d96:	07 5a       	subi	r16, 0xA7	; 167
    1d98:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	e5 5a       	subi	r30, 0xA5	; 165
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	60 81       	ld	r22, Z
    1da2:	71 81       	ldd	r23, Z+1	; 0x01
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	f8 01       	movw	r30, r16
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	80 83       	st	Z, r24
    1db6:	de 01       	movw	r26, r28
    1db8:	ab 5a       	subi	r26, 0xAB	; 171
    1dba:	bf 4f       	sbci	r27, 0xFF	; 255
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e7 5a       	subi	r30, 0xA7	; 167
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	80 81       	ld	r24, Z
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	8d 93       	st	X+, r24
    1dc8:	9c 93       	st	X, r25
    1dca:	fe 01       	movw	r30, r28
    1dcc:	eb 5a       	subi	r30, 0xAB	; 171
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	80 81       	ld	r24, Z
    1dd2:	91 81       	ldd	r25, Z+1	; 0x01
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <LCD_sendCommand+0x184>
    1dd8:	fe 01       	movw	r30, r28
    1dda:	eb 5a       	subi	r30, 0xAB	; 171
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	62 e0       	ldi	r22, 0x02	; 2
    1de6:	41 e0       	ldi	r20, 0x01	; 1
    1de8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1dec:	fe 01       	movw	r30, r28
    1dee:	ef 5a       	subi	r30, 0xAF	; 175
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	a0 e8       	ldi	r26, 0x80	; 128
    1df8:	bf e3       	ldi	r27, 0x3F	; 63
    1dfa:	80 83       	st	Z, r24
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	a2 83       	std	Z+2, r26	; 0x02
    1e00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e02:	8e 01       	movw	r16, r28
    1e04:	03 5b       	subi	r16, 0xB3	; 179
    1e06:	1f 4f       	sbci	r17, 0xFF	; 255
    1e08:	fe 01       	movw	r30, r28
    1e0a:	ef 5a       	subi	r30, 0xAF	; 175
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	4a ef       	ldi	r20, 0xFA	; 250
    1e1c:	54 e4       	ldi	r21, 0x44	; 68
    1e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	f8 01       	movw	r30, r16
    1e28:	80 83       	st	Z, r24
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	a2 83       	std	Z+2, r26	; 0x02
    1e2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e30:	fe 01       	movw	r30, r28
    1e32:	e3 5b       	subi	r30, 0xB3	; 179
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	60 81       	ld	r22, Z
    1e38:	71 81       	ldd	r23, Z+1	; 0x01
    1e3a:	82 81       	ldd	r24, Z+2	; 0x02
    1e3c:	93 81       	ldd	r25, Z+3	; 0x03
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e8       	ldi	r20, 0x80	; 128
    1e44:	5f e3       	ldi	r21, 0x3F	; 63
    1e46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e4a:	88 23       	and	r24, r24
    1e4c:	44 f4       	brge	.+16     	; 0x1e5e <LCD_sendCommand+0x20e>
		__ticks = 1;
    1e4e:	fe 01       	movw	r30, r28
    1e50:	e5 5b       	subi	r30, 0xB5	; 181
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	91 83       	std	Z+1, r25	; 0x01
    1e5a:	80 83       	st	Z, r24
    1e5c:	64 c0       	rjmp	.+200    	; 0x1f26 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e3 5b       	subi	r30, 0xB3	; 179
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	60 81       	ld	r22, Z
    1e66:	71 81       	ldd	r23, Z+1	; 0x01
    1e68:	82 81       	ldd	r24, Z+2	; 0x02
    1e6a:	93 81       	ldd	r25, Z+3	; 0x03
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	3f ef       	ldi	r19, 0xFF	; 255
    1e70:	4f e7       	ldi	r20, 0x7F	; 127
    1e72:	57 e4       	ldi	r21, 0x47	; 71
    1e74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e78:	18 16       	cp	r1, r24
    1e7a:	0c f0       	brlt	.+2      	; 0x1e7e <LCD_sendCommand+0x22e>
    1e7c:	43 c0       	rjmp	.+134    	; 0x1f04 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7e:	fe 01       	movw	r30, r28
    1e80:	ef 5a       	subi	r30, 0xAF	; 175
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	60 81       	ld	r22, Z
    1e86:	71 81       	ldd	r23, Z+1	; 0x01
    1e88:	82 81       	ldd	r24, Z+2	; 0x02
    1e8a:	93 81       	ldd	r25, Z+3	; 0x03
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e2       	ldi	r20, 0x20	; 32
    1e92:	51 e4       	ldi	r21, 0x41	; 65
    1e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	8e 01       	movw	r16, r28
    1e9e:	05 5b       	subi	r16, 0xB5	; 181
    1ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	f8 01       	movw	r30, r16
    1eb0:	91 83       	std	Z+1, r25	; 0x01
    1eb2:	80 83       	st	Z, r24
    1eb4:	1f c0       	rjmp	.+62     	; 0x1ef4 <LCD_sendCommand+0x2a4>
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	e7 5b       	subi	r30, 0xB7	; 183
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	88 ec       	ldi	r24, 0xC8	; 200
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	91 83       	std	Z+1, r25	; 0x01
    1ec2:	80 83       	st	Z, r24
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	e7 5b       	subi	r30, 0xB7	; 183
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	80 81       	ld	r24, Z
    1ecc:	91 81       	ldd	r25, Z+1	; 0x01
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <LCD_sendCommand+0x27e>
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e7 5b       	subi	r30, 0xB7	; 183
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1edc:	de 01       	movw	r26, r28
    1ede:	a5 5b       	subi	r26, 0xB5	; 181
    1ee0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	e5 5b       	subi	r30, 0xB5	; 181
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	80 81       	ld	r24, Z
    1eea:	91 81       	ldd	r25, Z+1	; 0x01
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	11 96       	adiw	r26, 0x01	; 1
    1ef0:	9c 93       	st	X, r25
    1ef2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	e5 5b       	subi	r30, 0xB5	; 181
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	80 81       	ld	r24, Z
    1efc:	91 81       	ldd	r25, Z+1	; 0x01
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	d1 f6       	brne	.-76     	; 0x1eb6 <LCD_sendCommand+0x266>
    1f02:	27 c0       	rjmp	.+78     	; 0x1f52 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f04:	8e 01       	movw	r16, r28
    1f06:	05 5b       	subi	r16, 0xB5	; 181
    1f08:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e3 5b       	subi	r30, 0xB3	; 179
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	60 81       	ld	r22, Z
    1f12:	71 81       	ldd	r23, Z+1	; 0x01
    1f14:	82 81       	ldd	r24, Z+2	; 0x02
    1f16:	93 81       	ldd	r25, Z+3	; 0x03
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	f8 01       	movw	r30, r16
    1f22:	91 83       	std	Z+1, r25	; 0x01
    1f24:	80 83       	st	Z, r24
    1f26:	de 01       	movw	r26, r28
    1f28:	a9 5b       	subi	r26, 0xB9	; 185
    1f2a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e5 5b       	subi	r30, 0xB5	; 181
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	80 81       	ld	r24, Z
    1f34:	91 81       	ldd	r25, Z+1	; 0x01
    1f36:	8d 93       	st	X+, r24
    1f38:	9c 93       	st	X, r25
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	e9 5b       	subi	r30, 0xB9	; 185
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	80 81       	ld	r24, Z
    1f42:	91 81       	ldd	r25, Z+1	; 0x01
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCD_sendCommand+0x2f4>
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e9 5b       	subi	r30, 0xB9	; 185
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1f52:	fe 01       	movw	r30, r28
    1f54:	ed 59       	subi	r30, 0x9D	; 157
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	88 2f       	mov	r24, r24
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	80 71       	andi	r24, 0x10	; 16
    1f60:	90 70       	andi	r25, 0x00	; 0
    1f62:	95 95       	asr	r25
    1f64:	87 95       	ror	r24
    1f66:	95 95       	asr	r25
    1f68:	87 95       	ror	r24
    1f6a:	95 95       	asr	r25
    1f6c:	87 95       	ror	r24
    1f6e:	95 95       	asr	r25
    1f70:	87 95       	ror	r24
    1f72:	98 2f       	mov	r25, r24
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	63 e0       	ldi	r22, 0x03	; 3
    1f78:	49 2f       	mov	r20, r25
    1f7a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1f7e:	fe 01       	movw	r30, r28
    1f80:	ed 59       	subi	r30, 0x9D	; 157
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	80 81       	ld	r24, Z
    1f86:	88 2f       	mov	r24, r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	80 72       	andi	r24, 0x20	; 32
    1f8c:	90 70       	andi	r25, 0x00	; 0
    1f8e:	95 95       	asr	r25
    1f90:	87 95       	ror	r24
    1f92:	95 95       	asr	r25
    1f94:	87 95       	ror	r24
    1f96:	95 95       	asr	r25
    1f98:	87 95       	ror	r24
    1f9a:	95 95       	asr	r25
    1f9c:	87 95       	ror	r24
    1f9e:	95 95       	asr	r25
    1fa0:	87 95       	ror	r24
    1fa2:	98 2f       	mov	r25, r24
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	64 e0       	ldi	r22, 0x04	; 4
    1fa8:	49 2f       	mov	r20, r25
    1faa:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1fae:	fe 01       	movw	r30, r28
    1fb0:	ed 59       	subi	r30, 0x9D	; 157
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	80 81       	ld	r24, Z
    1fb6:	88 2f       	mov	r24, r24
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	80 74       	andi	r24, 0x40	; 64
    1fbc:	90 70       	andi	r25, 0x00	; 0
    1fbe:	08 2e       	mov	r0, r24
    1fc0:	89 2f       	mov	r24, r25
    1fc2:	00 0c       	add	r0, r0
    1fc4:	88 1f       	adc	r24, r24
    1fc6:	99 0b       	sbc	r25, r25
    1fc8:	00 0c       	add	r0, r0
    1fca:	88 1f       	adc	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	98 2f       	mov	r25, r24
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	65 e0       	ldi	r22, 0x05	; 5
    1fd4:	49 2f       	mov	r20, r25
    1fd6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1fda:	fe 01       	movw	r30, r28
    1fdc:	ed 59       	subi	r30, 0x9D	; 157
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	80 81       	ld	r24, Z
    1fe2:	98 2f       	mov	r25, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	99 27       	eor	r25, r25
    1fe8:	99 1f       	adc	r25, r25
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	66 e0       	ldi	r22, 0x06	; 6
    1fee:	49 2f       	mov	r20, r25
    1ff0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	ed 5b       	subi	r30, 0xBD	; 189
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 e0       	ldi	r24, 0x00	; 0
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	a0 e8       	ldi	r26, 0x80	; 128
    2000:	bf e3       	ldi	r27, 0x3F	; 63
    2002:	80 83       	st	Z, r24
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	a2 83       	std	Z+2, r26	; 0x02
    2008:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200a:	8e 01       	movw	r16, r28
    200c:	01 5c       	subi	r16, 0xC1	; 193
    200e:	1f 4f       	sbci	r17, 0xFF	; 255
    2010:	fe 01       	movw	r30, r28
    2012:	ed 5b       	subi	r30, 0xBD	; 189
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	4a ef       	ldi	r20, 0xFA	; 250
    2024:	54 e4       	ldi	r21, 0x44	; 68
    2026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	f8 01       	movw	r30, r16
    2030:	80 83       	st	Z, r24
    2032:	91 83       	std	Z+1, r25	; 0x01
    2034:	a2 83       	std	Z+2, r26	; 0x02
    2036:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2038:	fe 01       	movw	r30, r28
    203a:	ff 96       	adiw	r30, 0x3f	; 63
    203c:	60 81       	ld	r22, Z
    203e:	71 81       	ldd	r23, Z+1	; 0x01
    2040:	82 81       	ldd	r24, Z+2	; 0x02
    2042:	93 81       	ldd	r25, Z+3	; 0x03
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e8       	ldi	r20, 0x80	; 128
    204a:	5f e3       	ldi	r21, 0x3F	; 63
    204c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2050:	88 23       	and	r24, r24
    2052:	2c f4       	brge	.+10     	; 0x205e <LCD_sendCommand+0x40e>
		__ticks = 1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9e af       	std	Y+62, r25	; 0x3e
    205a:	8d af       	std	Y+61, r24	; 0x3d
    205c:	46 c0       	rjmp	.+140    	; 0x20ea <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    205e:	fe 01       	movw	r30, r28
    2060:	ff 96       	adiw	r30, 0x3f	; 63
    2062:	60 81       	ld	r22, Z
    2064:	71 81       	ldd	r23, Z+1	; 0x01
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	3f ef       	ldi	r19, 0xFF	; 255
    206e:	4f e7       	ldi	r20, 0x7F	; 127
    2070:	57 e4       	ldi	r21, 0x47	; 71
    2072:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2076:	18 16       	cp	r1, r24
    2078:	64 f5       	brge	.+88     	; 0x20d2 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207a:	fe 01       	movw	r30, r28
    207c:	ed 5b       	subi	r30, 0xBD	; 189
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	60 81       	ld	r22, Z
    2082:	71 81       	ldd	r23, Z+1	; 0x01
    2084:	82 81       	ldd	r24, Z+2	; 0x02
    2086:	93 81       	ldd	r25, Z+3	; 0x03
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	40 e2       	ldi	r20, 0x20	; 32
    208e:	51 e4       	ldi	r21, 0x41	; 65
    2090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	bc 01       	movw	r22, r24
    209a:	cd 01       	movw	r24, r26
    209c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	9e af       	std	Y+62, r25	; 0x3e
    20a6:	8d af       	std	Y+61, r24	; 0x3d
    20a8:	0f c0       	rjmp	.+30     	; 0x20c8 <LCD_sendCommand+0x478>
    20aa:	88 ec       	ldi	r24, 0xC8	; 200
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	9c af       	std	Y+60, r25	; 0x3c
    20b0:	8b af       	std	Y+59, r24	; 0x3b
    20b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    20b4:	9c ad       	ldd	r25, Y+60	; 0x3c
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <LCD_sendCommand+0x466>
    20ba:	9c af       	std	Y+60, r25	; 0x3c
    20bc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20be:	8d ad       	ldd	r24, Y+61	; 0x3d
    20c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	9e af       	std	Y+62, r25	; 0x3e
    20c6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    20ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    20cc:	00 97       	sbiw	r24, 0x00	; 0
    20ce:	69 f7       	brne	.-38     	; 0x20aa <LCD_sendCommand+0x45a>
    20d0:	16 c0       	rjmp	.+44     	; 0x20fe <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d2:	fe 01       	movw	r30, r28
    20d4:	ff 96       	adiw	r30, 0x3f	; 63
    20d6:	60 81       	ld	r22, Z
    20d8:	71 81       	ldd	r23, Z+1	; 0x01
    20da:	82 81       	ldd	r24, Z+2	; 0x02
    20dc:	93 81       	ldd	r25, Z+3	; 0x03
    20de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9e af       	std	Y+62, r25	; 0x3e
    20e8:	8d af       	std	Y+61, r24	; 0x3d
    20ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    20ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    20ee:	9a af       	std	Y+58, r25	; 0x3a
    20f0:	89 af       	std	Y+57, r24	; 0x39
    20f2:	89 ad       	ldd	r24, Y+57	; 0x39
    20f4:	9a ad       	ldd	r25, Y+58	; 0x3a
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	f1 f7       	brne	.-4      	; 0x20f6 <LCD_sendCommand+0x4a6>
    20fa:	9a af       	std	Y+58, r25	; 0x3a
    20fc:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20fe:	80 e0       	ldi	r24, 0x00	; 0
    2100:	62 e0       	ldi	r22, 0x02	; 2
    2102:	40 e0       	ldi	r20, 0x00	; 0
    2104:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	a0 e8       	ldi	r26, 0x80	; 128
    210e:	bf e3       	ldi	r27, 0x3F	; 63
    2110:	8d ab       	std	Y+53, r24	; 0x35
    2112:	9e ab       	std	Y+54, r25	; 0x36
    2114:	af ab       	std	Y+55, r26	; 0x37
    2116:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2118:	6d a9       	ldd	r22, Y+53	; 0x35
    211a:	7e a9       	ldd	r23, Y+54	; 0x36
    211c:	8f a9       	ldd	r24, Y+55	; 0x37
    211e:	98 ad       	ldd	r25, Y+56	; 0x38
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	4a ef       	ldi	r20, 0xFA	; 250
    2126:	54 e4       	ldi	r21, 0x44	; 68
    2128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	89 ab       	std	Y+49, r24	; 0x31
    2132:	9a ab       	std	Y+50, r25	; 0x32
    2134:	ab ab       	std	Y+51, r26	; 0x33
    2136:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2138:	69 a9       	ldd	r22, Y+49	; 0x31
    213a:	7a a9       	ldd	r23, Y+50	; 0x32
    213c:	8b a9       	ldd	r24, Y+51	; 0x33
    213e:	9c a9       	ldd	r25, Y+52	; 0x34
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e8       	ldi	r20, 0x80	; 128
    2146:	5f e3       	ldi	r21, 0x3F	; 63
    2148:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    214c:	88 23       	and	r24, r24
    214e:	2c f4       	brge	.+10     	; 0x215a <LCD_sendCommand+0x50a>
		__ticks = 1;
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	98 ab       	std	Y+48, r25	; 0x30
    2156:	8f a7       	std	Y+47, r24	; 0x2f
    2158:	3f c0       	rjmp	.+126    	; 0x21d8 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    215a:	69 a9       	ldd	r22, Y+49	; 0x31
    215c:	7a a9       	ldd	r23, Y+50	; 0x32
    215e:	8b a9       	ldd	r24, Y+51	; 0x33
    2160:	9c a9       	ldd	r25, Y+52	; 0x34
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	3f ef       	ldi	r19, 0xFF	; 255
    2166:	4f e7       	ldi	r20, 0x7F	; 127
    2168:	57 e4       	ldi	r21, 0x47	; 71
    216a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    216e:	18 16       	cp	r1, r24
    2170:	4c f5       	brge	.+82     	; 0x21c4 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2172:	6d a9       	ldd	r22, Y+53	; 0x35
    2174:	7e a9       	ldd	r23, Y+54	; 0x36
    2176:	8f a9       	ldd	r24, Y+55	; 0x37
    2178:	98 ad       	ldd	r25, Y+56	; 0x38
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e2       	ldi	r20, 0x20	; 32
    2180:	51 e4       	ldi	r21, 0x41	; 65
    2182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	bc 01       	movw	r22, r24
    218c:	cd 01       	movw	r24, r26
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	98 ab       	std	Y+48, r25	; 0x30
    2198:	8f a7       	std	Y+47, r24	; 0x2f
    219a:	0f c0       	rjmp	.+30     	; 0x21ba <LCD_sendCommand+0x56a>
    219c:	88 ec       	ldi	r24, 0xC8	; 200
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	9e a7       	std	Y+46, r25	; 0x2e
    21a2:	8d a7       	std	Y+45, r24	; 0x2d
    21a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    21a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <LCD_sendCommand+0x558>
    21ac:	9e a7       	std	Y+46, r25	; 0x2e
    21ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21b2:	98 a9       	ldd	r25, Y+48	; 0x30
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	98 ab       	std	Y+48, r25	; 0x30
    21b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    21bc:	98 a9       	ldd	r25, Y+48	; 0x30
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	69 f7       	brne	.-38     	; 0x219c <LCD_sendCommand+0x54c>
    21c2:	14 c0       	rjmp	.+40     	; 0x21ec <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c4:	69 a9       	ldd	r22, Y+49	; 0x31
    21c6:	7a a9       	ldd	r23, Y+50	; 0x32
    21c8:	8b a9       	ldd	r24, Y+51	; 0x33
    21ca:	9c a9       	ldd	r25, Y+52	; 0x34
    21cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	98 ab       	std	Y+48, r25	; 0x30
    21d6:	8f a7       	std	Y+47, r24	; 0x2f
    21d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21da:	98 a9       	ldd	r25, Y+48	; 0x30
    21dc:	9c a7       	std	Y+44, r25	; 0x2c
    21de:	8b a7       	std	Y+43, r24	; 0x2b
    21e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    21e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <LCD_sendCommand+0x594>
    21e8:	9c a7       	std	Y+44, r25	; 0x2c
    21ea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	62 e0       	ldi	r22, 0x02	; 2
    21f0:	41 e0       	ldi	r20, 0x01	; 1
    21f2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	a0 e8       	ldi	r26, 0x80	; 128
    21fc:	bf e3       	ldi	r27, 0x3F	; 63
    21fe:	8f a3       	std	Y+39, r24	; 0x27
    2200:	98 a7       	std	Y+40, r25	; 0x28
    2202:	a9 a7       	std	Y+41, r26	; 0x29
    2204:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2206:	6f a1       	ldd	r22, Y+39	; 0x27
    2208:	78 a5       	ldd	r23, Y+40	; 0x28
    220a:	89 a5       	ldd	r24, Y+41	; 0x29
    220c:	9a a5       	ldd	r25, Y+42	; 0x2a
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4a ef       	ldi	r20, 0xFA	; 250
    2214:	54 e4       	ldi	r21, 0x44	; 68
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	8b a3       	std	Y+35, r24	; 0x23
    2220:	9c a3       	std	Y+36, r25	; 0x24
    2222:	ad a3       	std	Y+37, r26	; 0x25
    2224:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2226:	6b a1       	ldd	r22, Y+35	; 0x23
    2228:	7c a1       	ldd	r23, Y+36	; 0x24
    222a:	8d a1       	ldd	r24, Y+37	; 0x25
    222c:	9e a1       	ldd	r25, Y+38	; 0x26
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e8       	ldi	r20, 0x80	; 128
    2234:	5f e3       	ldi	r21, 0x3F	; 63
    2236:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    223a:	88 23       	and	r24, r24
    223c:	2c f4       	brge	.+10     	; 0x2248 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	9a a3       	std	Y+34, r25	; 0x22
    2244:	89 a3       	std	Y+33, r24	; 0x21
    2246:	3f c0       	rjmp	.+126    	; 0x22c6 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2248:	6b a1       	ldd	r22, Y+35	; 0x23
    224a:	7c a1       	ldd	r23, Y+36	; 0x24
    224c:	8d a1       	ldd	r24, Y+37	; 0x25
    224e:	9e a1       	ldd	r25, Y+38	; 0x26
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	3f ef       	ldi	r19, 0xFF	; 255
    2254:	4f e7       	ldi	r20, 0x7F	; 127
    2256:	57 e4       	ldi	r21, 0x47	; 71
    2258:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    225c:	18 16       	cp	r1, r24
    225e:	4c f5       	brge	.+82     	; 0x22b2 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2260:	6f a1       	ldd	r22, Y+39	; 0x27
    2262:	78 a5       	ldd	r23, Y+40	; 0x28
    2264:	89 a5       	ldd	r24, Y+41	; 0x29
    2266:	9a a5       	ldd	r25, Y+42	; 0x2a
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e2       	ldi	r20, 0x20	; 32
    226e:	51 e4       	ldi	r21, 0x41	; 65
    2270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	9a a3       	std	Y+34, r25	; 0x22
    2286:	89 a3       	std	Y+33, r24	; 0x21
    2288:	0f c0       	rjmp	.+30     	; 0x22a8 <LCD_sendCommand+0x658>
    228a:	88 ec       	ldi	r24, 0xC8	; 200
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	98 a3       	std	Y+32, r25	; 0x20
    2290:	8f 8f       	std	Y+31, r24	; 0x1f
    2292:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2294:	98 a1       	ldd	r25, Y+32	; 0x20
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <LCD_sendCommand+0x646>
    229a:	98 a3       	std	Y+32, r25	; 0x20
    229c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229e:	89 a1       	ldd	r24, Y+33	; 0x21
    22a0:	9a a1       	ldd	r25, Y+34	; 0x22
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	9a a3       	std	Y+34, r25	; 0x22
    22a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a8:	89 a1       	ldd	r24, Y+33	; 0x21
    22aa:	9a a1       	ldd	r25, Y+34	; 0x22
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	69 f7       	brne	.-38     	; 0x228a <LCD_sendCommand+0x63a>
    22b0:	14 c0       	rjmp	.+40     	; 0x22da <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b2:	6b a1       	ldd	r22, Y+35	; 0x23
    22b4:	7c a1       	ldd	r23, Y+36	; 0x24
    22b6:	8d a1       	ldd	r24, Y+37	; 0x25
    22b8:	9e a1       	ldd	r25, Y+38	; 0x26
    22ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	9a a3       	std	Y+34, r25	; 0x22
    22c4:	89 a3       	std	Y+33, r24	; 0x21
    22c6:	89 a1       	ldd	r24, Y+33	; 0x21
    22c8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ca:	9e 8f       	std	Y+30, r25	; 0x1e
    22cc:	8d 8f       	std	Y+29, r24	; 0x1d
    22ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	f1 f7       	brne	.-4      	; 0x22d2 <LCD_sendCommand+0x682>
    22d6:	9e 8f       	std	Y+30, r25	; 0x1e
    22d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    22da:	fe 01       	movw	r30, r28
    22dc:	ed 59       	subi	r30, 0x9D	; 157
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	80 81       	ld	r24, Z
    22e2:	98 2f       	mov	r25, r24
    22e4:	91 70       	andi	r25, 0x01	; 1
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	63 e0       	ldi	r22, 0x03	; 3
    22ea:	49 2f       	mov	r20, r25
    22ec:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    22f0:	fe 01       	movw	r30, r28
    22f2:	ed 59       	subi	r30, 0x9D	; 157
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 81       	ld	r24, Z
    22f8:	88 2f       	mov	r24, r24
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	82 70       	andi	r24, 0x02	; 2
    22fe:	90 70       	andi	r25, 0x00	; 0
    2300:	95 95       	asr	r25
    2302:	87 95       	ror	r24
    2304:	98 2f       	mov	r25, r24
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	64 e0       	ldi	r22, 0x04	; 4
    230a:	49 2f       	mov	r20, r25
    230c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2310:	fe 01       	movw	r30, r28
    2312:	ed 59       	subi	r30, 0x9D	; 157
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	80 81       	ld	r24, Z
    2318:	88 2f       	mov	r24, r24
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	84 70       	andi	r24, 0x04	; 4
    231e:	90 70       	andi	r25, 0x00	; 0
    2320:	95 95       	asr	r25
    2322:	87 95       	ror	r24
    2324:	95 95       	asr	r25
    2326:	87 95       	ror	r24
    2328:	98 2f       	mov	r25, r24
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	65 e0       	ldi	r22, 0x05	; 5
    232e:	49 2f       	mov	r20, r25
    2330:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2334:	fe 01       	movw	r30, r28
    2336:	ed 59       	subi	r30, 0x9D	; 157
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	80 81       	ld	r24, Z
    233c:	88 2f       	mov	r24, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	88 70       	andi	r24, 0x08	; 8
    2342:	90 70       	andi	r25, 0x00	; 0
    2344:	95 95       	asr	r25
    2346:	87 95       	ror	r24
    2348:	95 95       	asr	r25
    234a:	87 95       	ror	r24
    234c:	95 95       	asr	r25
    234e:	87 95       	ror	r24
    2350:	98 2f       	mov	r25, r24
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	66 e0       	ldi	r22, 0x06	; 6
    2356:	49 2f       	mov	r20, r25
    2358:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	a0 e8       	ldi	r26, 0x80	; 128
    2362:	bf e3       	ldi	r27, 0x3F	; 63
    2364:	89 8f       	std	Y+25, r24	; 0x19
    2366:	9a 8f       	std	Y+26, r25	; 0x1a
    2368:	ab 8f       	std	Y+27, r26	; 0x1b
    236a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    236c:	69 8d       	ldd	r22, Y+25	; 0x19
    236e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2370:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2372:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	4a ef       	ldi	r20, 0xFA	; 250
    237a:	54 e4       	ldi	r21, 0x44	; 68
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	8d 8b       	std	Y+21, r24	; 0x15
    2386:	9e 8b       	std	Y+22, r25	; 0x16
    2388:	af 8b       	std	Y+23, r26	; 0x17
    238a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    238c:	6d 89       	ldd	r22, Y+21	; 0x15
    238e:	7e 89       	ldd	r23, Y+22	; 0x16
    2390:	8f 89       	ldd	r24, Y+23	; 0x17
    2392:	98 8d       	ldd	r25, Y+24	; 0x18
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	40 e8       	ldi	r20, 0x80	; 128
    239a:	5f e3       	ldi	r21, 0x3F	; 63
    239c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23a0:	88 23       	and	r24, r24
    23a2:	2c f4       	brge	.+10     	; 0x23ae <LCD_sendCommand+0x75e>
		__ticks = 1;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	9c 8b       	std	Y+20, r25	; 0x14
    23aa:	8b 8b       	std	Y+19, r24	; 0x13
    23ac:	3f c0       	rjmp	.+126    	; 0x242c <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    23ae:	6d 89       	ldd	r22, Y+21	; 0x15
    23b0:	7e 89       	ldd	r23, Y+22	; 0x16
    23b2:	8f 89       	ldd	r24, Y+23	; 0x17
    23b4:	98 8d       	ldd	r25, Y+24	; 0x18
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	3f ef       	ldi	r19, 0xFF	; 255
    23ba:	4f e7       	ldi	r20, 0x7F	; 127
    23bc:	57 e4       	ldi	r21, 0x47	; 71
    23be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23c2:	18 16       	cp	r1, r24
    23c4:	4c f5       	brge	.+82     	; 0x2418 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23c6:	69 8d       	ldd	r22, Y+25	; 0x19
    23c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e2       	ldi	r20, 0x20	; 32
    23d4:	51 e4       	ldi	r21, 0x41	; 65
    23d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	bc 01       	movw	r22, r24
    23e0:	cd 01       	movw	r24, r26
    23e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	9c 8b       	std	Y+20, r25	; 0x14
    23ec:	8b 8b       	std	Y+19, r24	; 0x13
    23ee:	0f c0       	rjmp	.+30     	; 0x240e <LCD_sendCommand+0x7be>
    23f0:	88 ec       	ldi	r24, 0xC8	; 200
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9a 8b       	std	Y+18, r25	; 0x12
    23f6:	89 8b       	std	Y+17, r24	; 0x11
    23f8:	89 89       	ldd	r24, Y+17	; 0x11
    23fa:	9a 89       	ldd	r25, Y+18	; 0x12
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	f1 f7       	brne	.-4      	; 0x23fc <LCD_sendCommand+0x7ac>
    2400:	9a 8b       	std	Y+18, r25	; 0x12
    2402:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2404:	8b 89       	ldd	r24, Y+19	; 0x13
    2406:	9c 89       	ldd	r25, Y+20	; 0x14
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	9c 8b       	std	Y+20, r25	; 0x14
    240c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240e:	8b 89       	ldd	r24, Y+19	; 0x13
    2410:	9c 89       	ldd	r25, Y+20	; 0x14
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	69 f7       	brne	.-38     	; 0x23f0 <LCD_sendCommand+0x7a0>
    2416:	14 c0       	rjmp	.+40     	; 0x2440 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2418:	6d 89       	ldd	r22, Y+21	; 0x15
    241a:	7e 89       	ldd	r23, Y+22	; 0x16
    241c:	8f 89       	ldd	r24, Y+23	; 0x17
    241e:	98 8d       	ldd	r25, Y+24	; 0x18
    2420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9c 8b       	std	Y+20, r25	; 0x14
    242a:	8b 8b       	std	Y+19, r24	; 0x13
    242c:	8b 89       	ldd	r24, Y+19	; 0x13
    242e:	9c 89       	ldd	r25, Y+20	; 0x14
    2430:	98 8b       	std	Y+16, r25	; 0x10
    2432:	8f 87       	std	Y+15, r24	; 0x0f
    2434:	8f 85       	ldd	r24, Y+15	; 0x0f
    2436:	98 89       	ldd	r25, Y+16	; 0x10
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	f1 f7       	brne	.-4      	; 0x2438 <LCD_sendCommand+0x7e8>
    243c:	98 8b       	std	Y+16, r25	; 0x10
    243e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	62 e0       	ldi	r22, 0x02	; 2
    2444:	40 e0       	ldi	r20, 0x00	; 0
    2446:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	a0 e8       	ldi	r26, 0x80	; 128
    2450:	bf e3       	ldi	r27, 0x3F	; 63
    2452:	8b 87       	std	Y+11, r24	; 0x0b
    2454:	9c 87       	std	Y+12, r25	; 0x0c
    2456:	ad 87       	std	Y+13, r26	; 0x0d
    2458:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245a:	6b 85       	ldd	r22, Y+11	; 0x0b
    245c:	7c 85       	ldd	r23, Y+12	; 0x0c
    245e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2460:	9e 85       	ldd	r25, Y+14	; 0x0e
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4a ef       	ldi	r20, 0xFA	; 250
    2468:	54 e4       	ldi	r21, 0x44	; 68
    246a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	8f 83       	std	Y+7, r24	; 0x07
    2474:	98 87       	std	Y+8, r25	; 0x08
    2476:	a9 87       	std	Y+9, r26	; 0x09
    2478:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    247a:	6f 81       	ldd	r22, Y+7	; 0x07
    247c:	78 85       	ldd	r23, Y+8	; 0x08
    247e:	89 85       	ldd	r24, Y+9	; 0x09
    2480:	9a 85       	ldd	r25, Y+10	; 0x0a
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e8       	ldi	r20, 0x80	; 128
    2488:	5f e3       	ldi	r21, 0x3F	; 63
    248a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    248e:	88 23       	and	r24, r24
    2490:	2c f4       	brge	.+10     	; 0x249c <LCD_sendCommand+0x84c>
		__ticks = 1;
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
    249a:	3f c0       	rjmp	.+126    	; 0x251a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    249c:	6f 81       	ldd	r22, Y+7	; 0x07
    249e:	78 85       	ldd	r23, Y+8	; 0x08
    24a0:	89 85       	ldd	r24, Y+9	; 0x09
    24a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	3f ef       	ldi	r19, 0xFF	; 255
    24a8:	4f e7       	ldi	r20, 0x7F	; 127
    24aa:	57 e4       	ldi	r21, 0x47	; 71
    24ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24b0:	18 16       	cp	r1, r24
    24b2:	4c f5       	brge	.+82     	; 0x2506 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e2       	ldi	r20, 0x20	; 32
    24c2:	51 e4       	ldi	r21, 0x41	; 65
    24c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	bc 01       	movw	r22, r24
    24ce:	cd 01       	movw	r24, r26
    24d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	9e 83       	std	Y+6, r25	; 0x06
    24da:	8d 83       	std	Y+5, r24	; 0x05
    24dc:	0f c0       	rjmp	.+30     	; 0x24fc <LCD_sendCommand+0x8ac>
    24de:	88 ec       	ldi	r24, 0xC8	; 200
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9c 83       	std	Y+4, r25	; 0x04
    24e4:	8b 83       	std	Y+3, r24	; 0x03
    24e6:	8b 81       	ldd	r24, Y+3	; 0x03
    24e8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <LCD_sendCommand+0x89a>
    24ee:	9c 83       	std	Y+4, r25	; 0x04
    24f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f2:	8d 81       	ldd	r24, Y+5	; 0x05
    24f4:	9e 81       	ldd	r25, Y+6	; 0x06
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	9e 83       	std	Y+6, r25	; 0x06
    24fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fc:	8d 81       	ldd	r24, Y+5	; 0x05
    24fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	69 f7       	brne	.-38     	; 0x24de <LCD_sendCommand+0x88e>
    2504:	14 c0       	rjmp	.+40     	; 0x252e <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2506:	6f 81       	ldd	r22, Y+7	; 0x07
    2508:	78 85       	ldd	r23, Y+8	; 0x08
    250a:	89 85       	ldd	r24, Y+9	; 0x09
    250c:	9a 85       	ldd	r25, Y+10	; 0x0a
    250e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	9e 83       	std	Y+6, r25	; 0x06
    2518:	8d 83       	std	Y+5, r24	; 0x05
    251a:	8d 81       	ldd	r24, Y+5	; 0x05
    251c:	9e 81       	ldd	r25, Y+6	; 0x06
    251e:	9a 83       	std	Y+2, r25	; 0x02
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	9a 81       	ldd	r25, Y+2	; 0x02
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <LCD_sendCommand+0x8d6>
    252a:	9a 83       	std	Y+2, r25	; 0x02
    252c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    252e:	cd 59       	subi	r28, 0x9D	; 157
    2530:	df 4f       	sbci	r29, 0xFF	; 255
    2532:	0f b6       	in	r0, 0x3f	; 63
    2534:	f8 94       	cli
    2536:	de bf       	out	0x3e, r29	; 62
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	cd bf       	out	0x3d, r28	; 61
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	1f 91       	pop	r17
    2542:	0f 91       	pop	r16
    2544:	08 95       	ret

00002546 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2546:	0f 93       	push	r16
    2548:	1f 93       	push	r17
    254a:	df 93       	push	r29
    254c:	cf 93       	push	r28
    254e:	cd b7       	in	r28, 0x3d	; 61
    2550:	de b7       	in	r29, 0x3e	; 62
    2552:	c3 56       	subi	r28, 0x63	; 99
    2554:	d0 40       	sbci	r29, 0x00	; 0
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	cd bf       	out	0x3d, r28	; 61
    2560:	fe 01       	movw	r30, r28
    2562:	ed 59       	subi	r30, 0x9D	; 157
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	61 e0       	ldi	r22, 0x01	; 1
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2572:	fe 01       	movw	r30, r28
    2574:	e1 5a       	subi	r30, 0xA1	; 161
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	80 e0       	ldi	r24, 0x00	; 0
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	a0 e8       	ldi	r26, 0x80	; 128
    257e:	bf e3       	ldi	r27, 0x3F	; 63
    2580:	80 83       	st	Z, r24
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	a2 83       	std	Z+2, r26	; 0x02
    2586:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2588:	8e 01       	movw	r16, r28
    258a:	05 5a       	subi	r16, 0xA5	; 165
    258c:	1f 4f       	sbci	r17, 0xFF	; 255
    258e:	fe 01       	movw	r30, r28
    2590:	e1 5a       	subi	r30, 0xA1	; 161
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	60 81       	ld	r22, Z
    2596:	71 81       	ldd	r23, Z+1	; 0x01
    2598:	82 81       	ldd	r24, Z+2	; 0x02
    259a:	93 81       	ldd	r25, Z+3	; 0x03
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	4a ef       	ldi	r20, 0xFA	; 250
    25a2:	54 e4       	ldi	r21, 0x44	; 68
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	f8 01       	movw	r30, r16
    25ae:	80 83       	st	Z, r24
    25b0:	91 83       	std	Z+1, r25	; 0x01
    25b2:	a2 83       	std	Z+2, r26	; 0x02
    25b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25b6:	fe 01       	movw	r30, r28
    25b8:	e5 5a       	subi	r30, 0xA5	; 165
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	60 81       	ld	r22, Z
    25be:	71 81       	ldd	r23, Z+1	; 0x01
    25c0:	82 81       	ldd	r24, Z+2	; 0x02
    25c2:	93 81       	ldd	r25, Z+3	; 0x03
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d0:	88 23       	and	r24, r24
    25d2:	44 f4       	brge	.+16     	; 0x25e4 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    25d4:	fe 01       	movw	r30, r28
    25d6:	e7 5a       	subi	r30, 0xA7	; 167
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	91 83       	std	Z+1, r25	; 0x01
    25e0:	80 83       	st	Z, r24
    25e2:	64 c0       	rjmp	.+200    	; 0x26ac <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    25e4:	fe 01       	movw	r30, r28
    25e6:	e5 5a       	subi	r30, 0xA5	; 165
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	60 81       	ld	r22, Z
    25ec:	71 81       	ldd	r23, Z+1	; 0x01
    25ee:	82 81       	ldd	r24, Z+2	; 0x02
    25f0:	93 81       	ldd	r25, Z+3	; 0x03
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	3f ef       	ldi	r19, 0xFF	; 255
    25f6:	4f e7       	ldi	r20, 0x7F	; 127
    25f8:	57 e4       	ldi	r21, 0x47	; 71
    25fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25fe:	18 16       	cp	r1, r24
    2600:	0c f0       	brlt	.+2      	; 0x2604 <LCD_displayCharacter+0xbe>
    2602:	43 c0       	rjmp	.+134    	; 0x268a <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2604:	fe 01       	movw	r30, r28
    2606:	e1 5a       	subi	r30, 0xA1	; 161
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	60 81       	ld	r22, Z
    260c:	71 81       	ldd	r23, Z+1	; 0x01
    260e:	82 81       	ldd	r24, Z+2	; 0x02
    2610:	93 81       	ldd	r25, Z+3	; 0x03
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e2       	ldi	r20, 0x20	; 32
    2618:	51 e4       	ldi	r21, 0x41	; 65
    261a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	8e 01       	movw	r16, r28
    2624:	07 5a       	subi	r16, 0xA7	; 167
    2626:	1f 4f       	sbci	r17, 0xFF	; 255
    2628:	bc 01       	movw	r22, r24
    262a:	cd 01       	movw	r24, r26
    262c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	f8 01       	movw	r30, r16
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	80 83       	st	Z, r24
    263a:	1f c0       	rjmp	.+62     	; 0x267a <LCD_displayCharacter+0x134>
    263c:	fe 01       	movw	r30, r28
    263e:	e9 5a       	subi	r30, 0xA9	; 169
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	88 ec       	ldi	r24, 0xC8	; 200
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	80 83       	st	Z, r24
    264a:	fe 01       	movw	r30, r28
    264c:	e9 5a       	subi	r30, 0xA9	; 169
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <LCD_displayCharacter+0x10e>
    2658:	fe 01       	movw	r30, r28
    265a:	e9 5a       	subi	r30, 0xA9	; 169
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2662:	de 01       	movw	r26, r28
    2664:	a7 5a       	subi	r26, 0xA7	; 167
    2666:	bf 4f       	sbci	r27, 0xFF	; 255
    2668:	fe 01       	movw	r30, r28
    266a:	e7 5a       	subi	r30, 0xA7	; 167
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	11 96       	adiw	r26, 0x01	; 1
    2676:	9c 93       	st	X, r25
    2678:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267a:	fe 01       	movw	r30, r28
    267c:	e7 5a       	subi	r30, 0xA7	; 167
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	80 81       	ld	r24, Z
    2682:	91 81       	ldd	r25, Z+1	; 0x01
    2684:	00 97       	sbiw	r24, 0x00	; 0
    2686:	d1 f6       	brne	.-76     	; 0x263c <LCD_displayCharacter+0xf6>
    2688:	27 c0       	rjmp	.+78     	; 0x26d8 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268a:	8e 01       	movw	r16, r28
    268c:	07 5a       	subi	r16, 0xA7	; 167
    268e:	1f 4f       	sbci	r17, 0xFF	; 255
    2690:	fe 01       	movw	r30, r28
    2692:	e5 5a       	subi	r30, 0xA5	; 165
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	60 81       	ld	r22, Z
    2698:	71 81       	ldd	r23, Z+1	; 0x01
    269a:	82 81       	ldd	r24, Z+2	; 0x02
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	f8 01       	movw	r30, r16
    26a8:	91 83       	std	Z+1, r25	; 0x01
    26aa:	80 83       	st	Z, r24
    26ac:	de 01       	movw	r26, r28
    26ae:	ab 5a       	subi	r26, 0xAB	; 171
    26b0:	bf 4f       	sbci	r27, 0xFF	; 255
    26b2:	fe 01       	movw	r30, r28
    26b4:	e7 5a       	subi	r30, 0xA7	; 167
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 81       	ld	r24, Z
    26ba:	91 81       	ldd	r25, Z+1	; 0x01
    26bc:	8d 93       	st	X+, r24
    26be:	9c 93       	st	X, r25
    26c0:	fe 01       	movw	r30, r28
    26c2:	eb 5a       	subi	r30, 0xAB	; 171
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <LCD_displayCharacter+0x184>
    26ce:	fe 01       	movw	r30, r28
    26d0:	eb 5a       	subi	r30, 0xAB	; 171
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	91 83       	std	Z+1, r25	; 0x01
    26d6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	62 e0       	ldi	r22, 0x02	; 2
    26dc:	41 e0       	ldi	r20, 0x01	; 1
    26de:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    26e2:	fe 01       	movw	r30, r28
    26e4:	ef 5a       	subi	r30, 0xAF	; 175
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	a0 e8       	ldi	r26, 0x80	; 128
    26ee:	bf e3       	ldi	r27, 0x3F	; 63
    26f0:	80 83       	st	Z, r24
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	a2 83       	std	Z+2, r26	; 0x02
    26f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f8:	8e 01       	movw	r16, r28
    26fa:	03 5b       	subi	r16, 0xB3	; 179
    26fc:	1f 4f       	sbci	r17, 0xFF	; 255
    26fe:	fe 01       	movw	r30, r28
    2700:	ef 5a       	subi	r30, 0xAF	; 175
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	60 81       	ld	r22, Z
    2706:	71 81       	ldd	r23, Z+1	; 0x01
    2708:	82 81       	ldd	r24, Z+2	; 0x02
    270a:	93 81       	ldd	r25, Z+3	; 0x03
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	4a ef       	ldi	r20, 0xFA	; 250
    2712:	54 e4       	ldi	r21, 0x44	; 68
    2714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	f8 01       	movw	r30, r16
    271e:	80 83       	st	Z, r24
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	a2 83       	std	Z+2, r26	; 0x02
    2724:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2726:	fe 01       	movw	r30, r28
    2728:	e3 5b       	subi	r30, 0xB3	; 179
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	60 81       	ld	r22, Z
    272e:	71 81       	ldd	r23, Z+1	; 0x01
    2730:	82 81       	ldd	r24, Z+2	; 0x02
    2732:	93 81       	ldd	r25, Z+3	; 0x03
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e8       	ldi	r20, 0x80	; 128
    273a:	5f e3       	ldi	r21, 0x3F	; 63
    273c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2740:	88 23       	and	r24, r24
    2742:	44 f4       	brge	.+16     	; 0x2754 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2744:	fe 01       	movw	r30, r28
    2746:	e5 5b       	subi	r30, 0xB5	; 181
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	91 83       	std	Z+1, r25	; 0x01
    2750:	80 83       	st	Z, r24
    2752:	64 c0       	rjmp	.+200    	; 0x281c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2754:	fe 01       	movw	r30, r28
    2756:	e3 5b       	subi	r30, 0xB3	; 179
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	60 81       	ld	r22, Z
    275c:	71 81       	ldd	r23, Z+1	; 0x01
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	93 81       	ldd	r25, Z+3	; 0x03
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	3f ef       	ldi	r19, 0xFF	; 255
    2766:	4f e7       	ldi	r20, 0x7F	; 127
    2768:	57 e4       	ldi	r21, 0x47	; 71
    276a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    276e:	18 16       	cp	r1, r24
    2770:	0c f0       	brlt	.+2      	; 0x2774 <LCD_displayCharacter+0x22e>
    2772:	43 c0       	rjmp	.+134    	; 0x27fa <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2774:	fe 01       	movw	r30, r28
    2776:	ef 5a       	subi	r30, 0xAF	; 175
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	60 81       	ld	r22, Z
    277c:	71 81       	ldd	r23, Z+1	; 0x01
    277e:	82 81       	ldd	r24, Z+2	; 0x02
    2780:	93 81       	ldd	r25, Z+3	; 0x03
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	8e 01       	movw	r16, r28
    2794:	05 5b       	subi	r16, 0xB5	; 181
    2796:	1f 4f       	sbci	r17, 0xFF	; 255
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	f8 01       	movw	r30, r16
    27a6:	91 83       	std	Z+1, r25	; 0x01
    27a8:	80 83       	st	Z, r24
    27aa:	1f c0       	rjmp	.+62     	; 0x27ea <LCD_displayCharacter+0x2a4>
    27ac:	fe 01       	movw	r30, r28
    27ae:	e7 5b       	subi	r30, 0xB7	; 183
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	88 ec       	ldi	r24, 0xC8	; 200
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	91 83       	std	Z+1, r25	; 0x01
    27b8:	80 83       	st	Z, r24
    27ba:	fe 01       	movw	r30, r28
    27bc:	e7 5b       	subi	r30, 0xB7	; 183
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	f1 f7       	brne	.-4      	; 0x27c4 <LCD_displayCharacter+0x27e>
    27c8:	fe 01       	movw	r30, r28
    27ca:	e7 5b       	subi	r30, 0xB7	; 183
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	91 83       	std	Z+1, r25	; 0x01
    27d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d2:	de 01       	movw	r26, r28
    27d4:	a5 5b       	subi	r26, 0xB5	; 181
    27d6:	bf 4f       	sbci	r27, 0xFF	; 255
    27d8:	fe 01       	movw	r30, r28
    27da:	e5 5b       	subi	r30, 0xB5	; 181
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	80 81       	ld	r24, Z
    27e0:	91 81       	ldd	r25, Z+1	; 0x01
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	11 96       	adiw	r26, 0x01	; 1
    27e6:	9c 93       	st	X, r25
    27e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ea:	fe 01       	movw	r30, r28
    27ec:	e5 5b       	subi	r30, 0xB5	; 181
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	80 81       	ld	r24, Z
    27f2:	91 81       	ldd	r25, Z+1	; 0x01
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	d1 f6       	brne	.-76     	; 0x27ac <LCD_displayCharacter+0x266>
    27f8:	27 c0       	rjmp	.+78     	; 0x2848 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fa:	8e 01       	movw	r16, r28
    27fc:	05 5b       	subi	r16, 0xB5	; 181
    27fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2800:	fe 01       	movw	r30, r28
    2802:	e3 5b       	subi	r30, 0xB3	; 179
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	f8 01       	movw	r30, r16
    2818:	91 83       	std	Z+1, r25	; 0x01
    281a:	80 83       	st	Z, r24
    281c:	de 01       	movw	r26, r28
    281e:	a9 5b       	subi	r26, 0xB9	; 185
    2820:	bf 4f       	sbci	r27, 0xFF	; 255
    2822:	fe 01       	movw	r30, r28
    2824:	e5 5b       	subi	r30, 0xB5	; 181
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 81       	ld	r24, Z
    282a:	91 81       	ldd	r25, Z+1	; 0x01
    282c:	8d 93       	st	X+, r24
    282e:	9c 93       	st	X, r25
    2830:	fe 01       	movw	r30, r28
    2832:	e9 5b       	subi	r30, 0xB9	; 185
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <LCD_displayCharacter+0x2f4>
    283e:	fe 01       	movw	r30, r28
    2840:	e9 5b       	subi	r30, 0xB9	; 185
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2848:	fe 01       	movw	r30, r28
    284a:	ed 59       	subi	r30, 0x9D	; 157
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 81       	ld	r24, Z
    2850:	88 2f       	mov	r24, r24
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	80 71       	andi	r24, 0x10	; 16
    2856:	90 70       	andi	r25, 0x00	; 0
    2858:	95 95       	asr	r25
    285a:	87 95       	ror	r24
    285c:	95 95       	asr	r25
    285e:	87 95       	ror	r24
    2860:	95 95       	asr	r25
    2862:	87 95       	ror	r24
    2864:	95 95       	asr	r25
    2866:	87 95       	ror	r24
    2868:	98 2f       	mov	r25, r24
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	63 e0       	ldi	r22, 0x03	; 3
    286e:	49 2f       	mov	r20, r25
    2870:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2874:	fe 01       	movw	r30, r28
    2876:	ed 59       	subi	r30, 0x9D	; 157
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	80 81       	ld	r24, Z
    287c:	88 2f       	mov	r24, r24
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	80 72       	andi	r24, 0x20	; 32
    2882:	90 70       	andi	r25, 0x00	; 0
    2884:	95 95       	asr	r25
    2886:	87 95       	ror	r24
    2888:	95 95       	asr	r25
    288a:	87 95       	ror	r24
    288c:	95 95       	asr	r25
    288e:	87 95       	ror	r24
    2890:	95 95       	asr	r25
    2892:	87 95       	ror	r24
    2894:	95 95       	asr	r25
    2896:	87 95       	ror	r24
    2898:	98 2f       	mov	r25, r24
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	64 e0       	ldi	r22, 0x04	; 4
    289e:	49 2f       	mov	r20, r25
    28a0:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    28a4:	fe 01       	movw	r30, r28
    28a6:	ed 59       	subi	r30, 0x9D	; 157
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	80 81       	ld	r24, Z
    28ac:	88 2f       	mov	r24, r24
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	80 74       	andi	r24, 0x40	; 64
    28b2:	90 70       	andi	r25, 0x00	; 0
    28b4:	08 2e       	mov	r0, r24
    28b6:	89 2f       	mov	r24, r25
    28b8:	00 0c       	add	r0, r0
    28ba:	88 1f       	adc	r24, r24
    28bc:	99 0b       	sbc	r25, r25
    28be:	00 0c       	add	r0, r0
    28c0:	88 1f       	adc	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	98 2f       	mov	r25, r24
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	65 e0       	ldi	r22, 0x05	; 5
    28ca:	49 2f       	mov	r20, r25
    28cc:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    28d0:	fe 01       	movw	r30, r28
    28d2:	ed 59       	subi	r30, 0x9D	; 157
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	80 81       	ld	r24, Z
    28d8:	98 2f       	mov	r25, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	99 27       	eor	r25, r25
    28de:	99 1f       	adc	r25, r25
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	66 e0       	ldi	r22, 0x06	; 6
    28e4:	49 2f       	mov	r20, r25
    28e6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    28ea:	fe 01       	movw	r30, r28
    28ec:	ed 5b       	subi	r30, 0xBD	; 189
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	a0 e8       	ldi	r26, 0x80	; 128
    28f6:	bf e3       	ldi	r27, 0x3F	; 63
    28f8:	80 83       	st	Z, r24
    28fa:	91 83       	std	Z+1, r25	; 0x01
    28fc:	a2 83       	std	Z+2, r26	; 0x02
    28fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2900:	8e 01       	movw	r16, r28
    2902:	01 5c       	subi	r16, 0xC1	; 193
    2904:	1f 4f       	sbci	r17, 0xFF	; 255
    2906:	fe 01       	movw	r30, r28
    2908:	ed 5b       	subi	r30, 0xBD	; 189
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	60 81       	ld	r22, Z
    290e:	71 81       	ldd	r23, Z+1	; 0x01
    2910:	82 81       	ldd	r24, Z+2	; 0x02
    2912:	93 81       	ldd	r25, Z+3	; 0x03
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	4a ef       	ldi	r20, 0xFA	; 250
    291a:	54 e4       	ldi	r21, 0x44	; 68
    291c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	f8 01       	movw	r30, r16
    2926:	80 83       	st	Z, r24
    2928:	91 83       	std	Z+1, r25	; 0x01
    292a:	a2 83       	std	Z+2, r26	; 0x02
    292c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    292e:	fe 01       	movw	r30, r28
    2930:	ff 96       	adiw	r30, 0x3f	; 63
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e8       	ldi	r20, 0x80	; 128
    2940:	5f e3       	ldi	r21, 0x3F	; 63
    2942:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2946:	88 23       	and	r24, r24
    2948:	2c f4       	brge	.+10     	; 0x2954 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	9e af       	std	Y+62, r25	; 0x3e
    2950:	8d af       	std	Y+61, r24	; 0x3d
    2952:	46 c0       	rjmp	.+140    	; 0x29e0 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2954:	fe 01       	movw	r30, r28
    2956:	ff 96       	adiw	r30, 0x3f	; 63
    2958:	60 81       	ld	r22, Z
    295a:	71 81       	ldd	r23, Z+1	; 0x01
    295c:	82 81       	ldd	r24, Z+2	; 0x02
    295e:	93 81       	ldd	r25, Z+3	; 0x03
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	3f ef       	ldi	r19, 0xFF	; 255
    2964:	4f e7       	ldi	r20, 0x7F	; 127
    2966:	57 e4       	ldi	r21, 0x47	; 71
    2968:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    296c:	18 16       	cp	r1, r24
    296e:	64 f5       	brge	.+88     	; 0x29c8 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2970:	fe 01       	movw	r30, r28
    2972:	ed 5b       	subi	r30, 0xBD	; 189
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	60 81       	ld	r22, Z
    2978:	71 81       	ldd	r23, Z+1	; 0x01
    297a:	82 81       	ldd	r24, Z+2	; 0x02
    297c:	93 81       	ldd	r25, Z+3	; 0x03
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e2       	ldi	r20, 0x20	; 32
    2984:	51 e4       	ldi	r21, 0x41	; 65
    2986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9e af       	std	Y+62, r25	; 0x3e
    299c:	8d af       	std	Y+61, r24	; 0x3d
    299e:	0f c0       	rjmp	.+30     	; 0x29be <LCD_displayCharacter+0x478>
    29a0:	88 ec       	ldi	r24, 0xC8	; 200
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	9c af       	std	Y+60, r25	; 0x3c
    29a6:	8b af       	std	Y+59, r24	; 0x3b
    29a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    29aa:	9c ad       	ldd	r25, Y+60	; 0x3c
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <LCD_displayCharacter+0x466>
    29b0:	9c af       	std	Y+60, r25	; 0x3c
    29b2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    29b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	9e af       	std	Y+62, r25	; 0x3e
    29bc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29be:	8d ad       	ldd	r24, Y+61	; 0x3d
    29c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	69 f7       	brne	.-38     	; 0x29a0 <LCD_displayCharacter+0x45a>
    29c6:	16 c0       	rjmp	.+44     	; 0x29f4 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c8:	fe 01       	movw	r30, r28
    29ca:	ff 96       	adiw	r30, 0x3f	; 63
    29cc:	60 81       	ld	r22, Z
    29ce:	71 81       	ldd	r23, Z+1	; 0x01
    29d0:	82 81       	ldd	r24, Z+2	; 0x02
    29d2:	93 81       	ldd	r25, Z+3	; 0x03
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	9e af       	std	Y+62, r25	; 0x3e
    29de:	8d af       	std	Y+61, r24	; 0x3d
    29e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    29e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    29e4:	9a af       	std	Y+58, r25	; 0x3a
    29e6:	89 af       	std	Y+57, r24	; 0x39
    29e8:	89 ad       	ldd	r24, Y+57	; 0x39
    29ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	f1 f7       	brne	.-4      	; 0x29ec <LCD_displayCharacter+0x4a6>
    29f0:	9a af       	std	Y+58, r25	; 0x3a
    29f2:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	62 e0       	ldi	r22, 0x02	; 2
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	a0 e8       	ldi	r26, 0x80	; 128
    2a04:	bf e3       	ldi	r27, 0x3F	; 63
    2a06:	8d ab       	std	Y+53, r24	; 0x35
    2a08:	9e ab       	std	Y+54, r25	; 0x36
    2a0a:	af ab       	std	Y+55, r26	; 0x37
    2a0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a10:	7e a9       	ldd	r23, Y+54	; 0x36
    2a12:	8f a9       	ldd	r24, Y+55	; 0x37
    2a14:	98 ad       	ldd	r25, Y+56	; 0x38
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	4a ef       	ldi	r20, 0xFA	; 250
    2a1c:	54 e4       	ldi	r21, 0x44	; 68
    2a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	89 ab       	std	Y+49, r24	; 0x31
    2a28:	9a ab       	std	Y+50, r25	; 0x32
    2a2a:	ab ab       	std	Y+51, r26	; 0x33
    2a2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a2e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a30:	7a a9       	ldd	r23, Y+50	; 0x32
    2a32:	8b a9       	ldd	r24, Y+51	; 0x33
    2a34:	9c a9       	ldd	r25, Y+52	; 0x34
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e8       	ldi	r20, 0x80	; 128
    2a3c:	5f e3       	ldi	r21, 0x3F	; 63
    2a3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a42:	88 23       	and	r24, r24
    2a44:	2c f4       	brge	.+10     	; 0x2a50 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	98 ab       	std	Y+48, r25	; 0x30
    2a4c:	8f a7       	std	Y+47, r24	; 0x2f
    2a4e:	3f c0       	rjmp	.+126    	; 0x2ace <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2a50:	69 a9       	ldd	r22, Y+49	; 0x31
    2a52:	7a a9       	ldd	r23, Y+50	; 0x32
    2a54:	8b a9       	ldd	r24, Y+51	; 0x33
    2a56:	9c a9       	ldd	r25, Y+52	; 0x34
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	3f ef       	ldi	r19, 0xFF	; 255
    2a5c:	4f e7       	ldi	r20, 0x7F	; 127
    2a5e:	57 e4       	ldi	r21, 0x47	; 71
    2a60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a64:	18 16       	cp	r1, r24
    2a66:	4c f5       	brge	.+82     	; 0x2aba <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a68:	6d a9       	ldd	r22, Y+53	; 0x35
    2a6a:	7e a9       	ldd	r23, Y+54	; 0x36
    2a6c:	8f a9       	ldd	r24, Y+55	; 0x37
    2a6e:	98 ad       	ldd	r25, Y+56	; 0x38
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e2       	ldi	r20, 0x20	; 32
    2a76:	51 e4       	ldi	r21, 0x41	; 65
    2a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	bc 01       	movw	r22, r24
    2a82:	cd 01       	movw	r24, r26
    2a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	98 ab       	std	Y+48, r25	; 0x30
    2a8e:	8f a7       	std	Y+47, r24	; 0x2f
    2a90:	0f c0       	rjmp	.+30     	; 0x2ab0 <LCD_displayCharacter+0x56a>
    2a92:	88 ec       	ldi	r24, 0xC8	; 200
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	9e a7       	std	Y+46, r25	; 0x2e
    2a98:	8d a7       	std	Y+45, r24	; 0x2d
    2a9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <LCD_displayCharacter+0x558>
    2aa2:	9e a7       	std	Y+46, r25	; 0x2e
    2aa4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aa8:	98 a9       	ldd	r25, Y+48	; 0x30
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	98 ab       	std	Y+48, r25	; 0x30
    2aae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ab4:	00 97       	sbiw	r24, 0x00	; 0
    2ab6:	69 f7       	brne	.-38     	; 0x2a92 <LCD_displayCharacter+0x54c>
    2ab8:	14 c0       	rjmp	.+40     	; 0x2ae2 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aba:	69 a9       	ldd	r22, Y+49	; 0x31
    2abc:	7a a9       	ldd	r23, Y+50	; 0x32
    2abe:	8b a9       	ldd	r24, Y+51	; 0x33
    2ac0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	98 ab       	std	Y+48, r25	; 0x30
    2acc:	8f a7       	std	Y+47, r24	; 0x2f
    2ace:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ad0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad2:	9c a7       	std	Y+44, r25	; 0x2c
    2ad4:	8b a7       	std	Y+43, r24	; 0x2b
    2ad6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ad8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <LCD_displayCharacter+0x594>
    2ade:	9c a7       	std	Y+44, r25	; 0x2c
    2ae0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	62 e0       	ldi	r22, 0x02	; 2
    2ae6:	41 e0       	ldi	r20, 0x01	; 1
    2ae8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	a0 e8       	ldi	r26, 0x80	; 128
    2af2:	bf e3       	ldi	r27, 0x3F	; 63
    2af4:	8f a3       	std	Y+39, r24	; 0x27
    2af6:	98 a7       	std	Y+40, r25	; 0x28
    2af8:	a9 a7       	std	Y+41, r26	; 0x29
    2afa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afc:	6f a1       	ldd	r22, Y+39	; 0x27
    2afe:	78 a5       	ldd	r23, Y+40	; 0x28
    2b00:	89 a5       	ldd	r24, Y+41	; 0x29
    2b02:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	4a ef       	ldi	r20, 0xFA	; 250
    2b0a:	54 e4       	ldi	r21, 0x44	; 68
    2b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	8b a3       	std	Y+35, r24	; 0x23
    2b16:	9c a3       	std	Y+36, r25	; 0x24
    2b18:	ad a3       	std	Y+37, r26	; 0x25
    2b1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b20:	8d a1       	ldd	r24, Y+37	; 0x25
    2b22:	9e a1       	ldd	r25, Y+38	; 0x26
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e8       	ldi	r20, 0x80	; 128
    2b2a:	5f e3       	ldi	r21, 0x3F	; 63
    2b2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b30:	88 23       	and	r24, r24
    2b32:	2c f4       	brge	.+10     	; 0x2b3e <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	9a a3       	std	Y+34, r25	; 0x22
    2b3a:	89 a3       	std	Y+33, r24	; 0x21
    2b3c:	3f c0       	rjmp	.+126    	; 0x2bbc <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2b3e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b40:	7c a1       	ldd	r23, Y+36	; 0x24
    2b42:	8d a1       	ldd	r24, Y+37	; 0x25
    2b44:	9e a1       	ldd	r25, Y+38	; 0x26
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	3f ef       	ldi	r19, 0xFF	; 255
    2b4a:	4f e7       	ldi	r20, 0x7F	; 127
    2b4c:	57 e4       	ldi	r21, 0x47	; 71
    2b4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b52:	18 16       	cp	r1, r24
    2b54:	4c f5       	brge	.+82     	; 0x2ba8 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b56:	6f a1       	ldd	r22, Y+39	; 0x27
    2b58:	78 a5       	ldd	r23, Y+40	; 0x28
    2b5a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e2       	ldi	r20, 0x20	; 32
    2b64:	51 e4       	ldi	r21, 0x41	; 65
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	bc 01       	movw	r22, r24
    2b70:	cd 01       	movw	r24, r26
    2b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	9a a3       	std	Y+34, r25	; 0x22
    2b7c:	89 a3       	std	Y+33, r24	; 0x21
    2b7e:	0f c0       	rjmp	.+30     	; 0x2b9e <LCD_displayCharacter+0x658>
    2b80:	88 ec       	ldi	r24, 0xC8	; 200
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	98 a3       	std	Y+32, r25	; 0x20
    2b86:	8f 8f       	std	Y+31, r24	; 0x1f
    2b88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b8a:	98 a1       	ldd	r25, Y+32	; 0x20
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	f1 f7       	brne	.-4      	; 0x2b8c <LCD_displayCharacter+0x646>
    2b90:	98 a3       	std	Y+32, r25	; 0x20
    2b92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b94:	89 a1       	ldd	r24, Y+33	; 0x21
    2b96:	9a a1       	ldd	r25, Y+34	; 0x22
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	9a a3       	std	Y+34, r25	; 0x22
    2b9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2ba0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	69 f7       	brne	.-38     	; 0x2b80 <LCD_displayCharacter+0x63a>
    2ba6:	14 c0       	rjmp	.+40     	; 0x2bd0 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba8:	6b a1       	ldd	r22, Y+35	; 0x23
    2baa:	7c a1       	ldd	r23, Y+36	; 0x24
    2bac:	8d a1       	ldd	r24, Y+37	; 0x25
    2bae:	9e a1       	ldd	r25, Y+38	; 0x26
    2bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	9a a3       	std	Y+34, r25	; 0x22
    2bba:	89 a3       	std	Y+33, r24	; 0x21
    2bbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2bc0:	9e 8f       	std	Y+30, r25	; 0x1e
    2bc2:	8d 8f       	std	Y+29, r24	; 0x1d
    2bc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <LCD_displayCharacter+0x682>
    2bcc:	9e 8f       	std	Y+30, r25	; 0x1e
    2bce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	ed 59       	subi	r30, 0x9D	; 157
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	80 81       	ld	r24, Z
    2bd8:	98 2f       	mov	r25, r24
    2bda:	91 70       	andi	r25, 0x01	; 1
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	63 e0       	ldi	r22, 0x03	; 3
    2be0:	49 2f       	mov	r20, r25
    2be2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2be6:	fe 01       	movw	r30, r28
    2be8:	ed 59       	subi	r30, 0x9D	; 157
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 81       	ld	r24, Z
    2bee:	88 2f       	mov	r24, r24
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	82 70       	andi	r24, 0x02	; 2
    2bf4:	90 70       	andi	r25, 0x00	; 0
    2bf6:	95 95       	asr	r25
    2bf8:	87 95       	ror	r24
    2bfa:	98 2f       	mov	r25, r24
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	64 e0       	ldi	r22, 0x04	; 4
    2c00:	49 2f       	mov	r20, r25
    2c02:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2c06:	fe 01       	movw	r30, r28
    2c08:	ed 59       	subi	r30, 0x9D	; 157
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	80 81       	ld	r24, Z
    2c0e:	88 2f       	mov	r24, r24
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	84 70       	andi	r24, 0x04	; 4
    2c14:	90 70       	andi	r25, 0x00	; 0
    2c16:	95 95       	asr	r25
    2c18:	87 95       	ror	r24
    2c1a:	95 95       	asr	r25
    2c1c:	87 95       	ror	r24
    2c1e:	98 2f       	mov	r25, r24
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	65 e0       	ldi	r22, 0x05	; 5
    2c24:	49 2f       	mov	r20, r25
    2c26:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	ed 59       	subi	r30, 0x9D	; 157
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 81       	ld	r24, Z
    2c32:	88 2f       	mov	r24, r24
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	88 70       	andi	r24, 0x08	; 8
    2c38:	90 70       	andi	r25, 0x00	; 0
    2c3a:	95 95       	asr	r25
    2c3c:	87 95       	ror	r24
    2c3e:	95 95       	asr	r25
    2c40:	87 95       	ror	r24
    2c42:	95 95       	asr	r25
    2c44:	87 95       	ror	r24
    2c46:	98 2f       	mov	r25, r24
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	66 e0       	ldi	r22, 0x06	; 6
    2c4c:	49 2f       	mov	r20, r25
    2c4e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	a0 e8       	ldi	r26, 0x80	; 128
    2c58:	bf e3       	ldi	r27, 0x3F	; 63
    2c5a:	89 8f       	std	Y+25, r24	; 0x19
    2c5c:	9a 8f       	std	Y+26, r25	; 0x1a
    2c5e:	ab 8f       	std	Y+27, r26	; 0x1b
    2c60:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c62:	69 8d       	ldd	r22, Y+25	; 0x19
    2c64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	4a ef       	ldi	r20, 0xFA	; 250
    2c70:	54 e4       	ldi	r21, 0x44	; 68
    2c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	8d 8b       	std	Y+21, r24	; 0x15
    2c7c:	9e 8b       	std	Y+22, r25	; 0x16
    2c7e:	af 8b       	std	Y+23, r26	; 0x17
    2c80:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c82:	6d 89       	ldd	r22, Y+21	; 0x15
    2c84:	7e 89       	ldd	r23, Y+22	; 0x16
    2c86:	8f 89       	ldd	r24, Y+23	; 0x17
    2c88:	98 8d       	ldd	r25, Y+24	; 0x18
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	40 e8       	ldi	r20, 0x80	; 128
    2c90:	5f e3       	ldi	r21, 0x3F	; 63
    2c92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c96:	88 23       	and	r24, r24
    2c98:	2c f4       	brge	.+10     	; 0x2ca4 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	9c 8b       	std	Y+20, r25	; 0x14
    2ca0:	8b 8b       	std	Y+19, r24	; 0x13
    2ca2:	3f c0       	rjmp	.+126    	; 0x2d22 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2ca4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ca6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ca8:	8f 89       	ldd	r24, Y+23	; 0x17
    2caa:	98 8d       	ldd	r25, Y+24	; 0x18
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	3f ef       	ldi	r19, 0xFF	; 255
    2cb0:	4f e7       	ldi	r20, 0x7F	; 127
    2cb2:	57 e4       	ldi	r21, 0x47	; 71
    2cb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb8:	18 16       	cp	r1, r24
    2cba:	4c f5       	brge	.+82     	; 0x2d0e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cbc:	69 8d       	ldd	r22, Y+25	; 0x19
    2cbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e2       	ldi	r20, 0x20	; 32
    2cca:	51 e4       	ldi	r21, 0x41	; 65
    2ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	bc 01       	movw	r22, r24
    2cd6:	cd 01       	movw	r24, r26
    2cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	9c 8b       	std	Y+20, r25	; 0x14
    2ce2:	8b 8b       	std	Y+19, r24	; 0x13
    2ce4:	0f c0       	rjmp	.+30     	; 0x2d04 <LCD_displayCharacter+0x7be>
    2ce6:	88 ec       	ldi	r24, 0xC8	; 200
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	9a 8b       	std	Y+18, r25	; 0x12
    2cec:	89 8b       	std	Y+17, r24	; 0x11
    2cee:	89 89       	ldd	r24, Y+17	; 0x11
    2cf0:	9a 89       	ldd	r25, Y+18	; 0x12
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
    2cf4:	f1 f7       	brne	.-4      	; 0x2cf2 <LCD_displayCharacter+0x7ac>
    2cf6:	9a 8b       	std	Y+18, r25	; 0x12
    2cf8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    2cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	9c 8b       	std	Y+20, r25	; 0x14
    2d02:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d04:	8b 89       	ldd	r24, Y+19	; 0x13
    2d06:	9c 89       	ldd	r25, Y+20	; 0x14
    2d08:	00 97       	sbiw	r24, 0x00	; 0
    2d0a:	69 f7       	brne	.-38     	; 0x2ce6 <LCD_displayCharacter+0x7a0>
    2d0c:	14 c0       	rjmp	.+40     	; 0x2d36 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d10:	7e 89       	ldd	r23, Y+22	; 0x16
    2d12:	8f 89       	ldd	r24, Y+23	; 0x17
    2d14:	98 8d       	ldd	r25, Y+24	; 0x18
    2d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	9c 8b       	std	Y+20, r25	; 0x14
    2d20:	8b 8b       	std	Y+19, r24	; 0x13
    2d22:	8b 89       	ldd	r24, Y+19	; 0x13
    2d24:	9c 89       	ldd	r25, Y+20	; 0x14
    2d26:	98 8b       	std	Y+16, r25	; 0x10
    2d28:	8f 87       	std	Y+15, r24	; 0x0f
    2d2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d2c:	98 89       	ldd	r25, Y+16	; 0x10
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	f1 f7       	brne	.-4      	; 0x2d2e <LCD_displayCharacter+0x7e8>
    2d32:	98 8b       	std	Y+16, r25	; 0x10
    2d34:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	62 e0       	ldi	r22, 0x02	; 2
    2d3a:	40 e0       	ldi	r20, 0x00	; 0
    2d3c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	a0 e8       	ldi	r26, 0x80	; 128
    2d46:	bf e3       	ldi	r27, 0x3F	; 63
    2d48:	8b 87       	std	Y+11, r24	; 0x0b
    2d4a:	9c 87       	std	Y+12, r25	; 0x0c
    2d4c:	ad 87       	std	Y+13, r26	; 0x0d
    2d4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	4a ef       	ldi	r20, 0xFA	; 250
    2d5e:	54 e4       	ldi	r21, 0x44	; 68
    2d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	8f 83       	std	Y+7, r24	; 0x07
    2d6a:	98 87       	std	Y+8, r25	; 0x08
    2d6c:	a9 87       	std	Y+9, r26	; 0x09
    2d6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d70:	6f 81       	ldd	r22, Y+7	; 0x07
    2d72:	78 85       	ldd	r23, Y+8	; 0x08
    2d74:	89 85       	ldd	r24, Y+9	; 0x09
    2d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	40 e8       	ldi	r20, 0x80	; 128
    2d7e:	5f e3       	ldi	r21, 0x3F	; 63
    2d80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d84:	88 23       	and	r24, r24
    2d86:	2c f4       	brge	.+10     	; 0x2d92 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	9e 83       	std	Y+6, r25	; 0x06
    2d8e:	8d 83       	std	Y+5, r24	; 0x05
    2d90:	3f c0       	rjmp	.+126    	; 0x2e10 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2d92:	6f 81       	ldd	r22, Y+7	; 0x07
    2d94:	78 85       	ldd	r23, Y+8	; 0x08
    2d96:	89 85       	ldd	r24, Y+9	; 0x09
    2d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	3f ef       	ldi	r19, 0xFF	; 255
    2d9e:	4f e7       	ldi	r20, 0x7F	; 127
    2da0:	57 e4       	ldi	r21, 0x47	; 71
    2da2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2da6:	18 16       	cp	r1, r24
    2da8:	4c f5       	brge	.+82     	; 0x2dfc <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2daa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e2       	ldi	r20, 0x20	; 32
    2db8:	51 e4       	ldi	r21, 0x41	; 65
    2dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	bc 01       	movw	r22, r24
    2dc4:	cd 01       	movw	r24, r26
    2dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	9e 83       	std	Y+6, r25	; 0x06
    2dd0:	8d 83       	std	Y+5, r24	; 0x05
    2dd2:	0f c0       	rjmp	.+30     	; 0x2df2 <LCD_displayCharacter+0x8ac>
    2dd4:	88 ec       	ldi	r24, 0xC8	; 200
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	9c 83       	std	Y+4, r25	; 0x04
    2dda:	8b 83       	std	Y+3, r24	; 0x03
    2ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dde:	9c 81       	ldd	r25, Y+4	; 0x04
    2de0:	01 97       	sbiw	r24, 0x01	; 1
    2de2:	f1 f7       	brne	.-4      	; 0x2de0 <LCD_displayCharacter+0x89a>
    2de4:	9c 83       	std	Y+4, r25	; 0x04
    2de6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	9e 81       	ldd	r25, Y+6	; 0x06
    2dec:	01 97       	sbiw	r24, 0x01	; 1
    2dee:	9e 83       	std	Y+6, r25	; 0x06
    2df0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	9e 81       	ldd	r25, Y+6	; 0x06
    2df6:	00 97       	sbiw	r24, 0x00	; 0
    2df8:	69 f7       	brne	.-38     	; 0x2dd4 <LCD_displayCharacter+0x88e>
    2dfa:	14 c0       	rjmp	.+40     	; 0x2e24 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2dfe:	78 85       	ldd	r23, Y+8	; 0x08
    2e00:	89 85       	ldd	r24, Y+9	; 0x09
    2e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	9e 83       	std	Y+6, r25	; 0x06
    2e0e:	8d 83       	std	Y+5, r24	; 0x05
    2e10:	8d 81       	ldd	r24, Y+5	; 0x05
    2e12:	9e 81       	ldd	r25, Y+6	; 0x06
    2e14:	9a 83       	std	Y+2, r25	; 0x02
    2e16:	89 83       	std	Y+1, r24	; 0x01
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
    2e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1c:	01 97       	sbiw	r24, 0x01	; 1
    2e1e:	f1 f7       	brne	.-4      	; 0x2e1c <LCD_displayCharacter+0x8d6>
    2e20:	9a 83       	std	Y+2, r25	; 0x02
    2e22:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2e24:	cd 59       	subi	r28, 0x9D	; 157
    2e26:	df 4f       	sbci	r29, 0xFF	; 255
    2e28:	0f b6       	in	r0, 0x3f	; 63
    2e2a:	f8 94       	cli
    2e2c:	de bf       	out	0x3e, r29	; 62
    2e2e:	0f be       	out	0x3f, r0	; 63
    2e30:	cd bf       	out	0x3d, r28	; 61
    2e32:	cf 91       	pop	r28
    2e34:	df 91       	pop	r29
    2e36:	1f 91       	pop	r17
    2e38:	0f 91       	pop	r16
    2e3a:	08 95       	ret

00002e3c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2e3c:	df 93       	push	r29
    2e3e:	cf 93       	push	r28
    2e40:	00 d0       	rcall	.+0      	; 0x2e42 <LCD_displayString+0x6>
    2e42:	0f 92       	push	r0
    2e44:	cd b7       	in	r28, 0x3d	; 61
    2e46:	de b7       	in	r29, 0x3e	; 62
    2e48:	9b 83       	std	Y+3, r25	; 0x03
    2e4a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e4c:	19 82       	std	Y+1, r1	; 0x01
    2e4e:	0e c0       	rjmp	.+28     	; 0x2e6c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	28 2f       	mov	r18, r24
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	e2 0f       	add	r30, r18
    2e5e:	f3 1f       	adc	r31, r19
    2e60:	80 81       	ld	r24, Z
    2e62:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_displayCharacter>
		i++;
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	8f 5f       	subi	r24, 0xFF	; 255
    2e6a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	8a 81       	ldd	r24, Y+2	; 0x02
    2e74:	9b 81       	ldd	r25, Y+3	; 0x03
    2e76:	fc 01       	movw	r30, r24
    2e78:	e2 0f       	add	r30, r18
    2e7a:	f3 1f       	adc	r31, r19
    2e7c:	80 81       	ld	r24, Z
    2e7e:	88 23       	and	r24, r24
    2e80:	39 f7       	brne	.-50     	; 0x2e50 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	0f 90       	pop	r0
    2e88:	cf 91       	pop	r28
    2e8a:	df 91       	pop	r29
    2e8c:	08 95       	ret

00002e8e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2e8e:	df 93       	push	r29
    2e90:	cf 93       	push	r28
    2e92:	00 d0       	rcall	.+0      	; 0x2e94 <LCD_moveCursor+0x6>
    2e94:	00 d0       	rcall	.+0      	; 0x2e96 <LCD_moveCursor+0x8>
    2e96:	0f 92       	push	r0
    2e98:	cd b7       	in	r28, 0x3d	; 61
    2e9a:	de b7       	in	r29, 0x3e	; 62
    2e9c:	8a 83       	std	Y+2, r24	; 0x02
    2e9e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea2:	28 2f       	mov	r18, r24
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	3d 83       	std	Y+5, r19	; 0x05
    2ea8:	2c 83       	std	Y+4, r18	; 0x04
    2eaa:	8c 81       	ldd	r24, Y+4	; 0x04
    2eac:	9d 81       	ldd	r25, Y+5	; 0x05
    2eae:	81 30       	cpi	r24, 0x01	; 1
    2eb0:	91 05       	cpc	r25, r1
    2eb2:	c1 f0       	breq	.+48     	; 0x2ee4 <LCD_moveCursor+0x56>
    2eb4:	2c 81       	ldd	r18, Y+4	; 0x04
    2eb6:	3d 81       	ldd	r19, Y+5	; 0x05
    2eb8:	22 30       	cpi	r18, 0x02	; 2
    2eba:	31 05       	cpc	r19, r1
    2ebc:	2c f4       	brge	.+10     	; 0x2ec8 <LCD_moveCursor+0x3a>
    2ebe:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec2:	00 97       	sbiw	r24, 0x00	; 0
    2ec4:	61 f0       	breq	.+24     	; 0x2ede <LCD_moveCursor+0x50>
    2ec6:	19 c0       	rjmp	.+50     	; 0x2efa <LCD_moveCursor+0x6c>
    2ec8:	2c 81       	ldd	r18, Y+4	; 0x04
    2eca:	3d 81       	ldd	r19, Y+5	; 0x05
    2ecc:	22 30       	cpi	r18, 0x02	; 2
    2ece:	31 05       	cpc	r19, r1
    2ed0:	69 f0       	breq	.+26     	; 0x2eec <LCD_moveCursor+0x5e>
    2ed2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed6:	83 30       	cpi	r24, 0x03	; 3
    2ed8:	91 05       	cpc	r25, r1
    2eda:	61 f0       	breq	.+24     	; 0x2ef4 <LCD_moveCursor+0x66>
    2edc:	0e c0       	rjmp	.+28     	; 0x2efa <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2ede:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee0:	89 83       	std	Y+1, r24	; 0x01
    2ee2:	0b c0       	rjmp	.+22     	; 0x2efa <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	80 5c       	subi	r24, 0xC0	; 192
    2ee8:	89 83       	std	Y+1, r24	; 0x01
    2eea:	07 c0       	rjmp	.+14     	; 0x2efa <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2eec:	8b 81       	ldd	r24, Y+3	; 0x03
    2eee:	80 5f       	subi	r24, 0xF0	; 240
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	03 c0       	rjmp	.+6      	; 0x2efa <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef6:	80 5b       	subi	r24, 0xB0	; 176
    2ef8:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	80 68       	ori	r24, 0x80	; 128
    2efe:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <LCD_sendCommand>
}
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	0f 90       	pop	r0
    2f0a:	0f 90       	pop	r0
    2f0c:	cf 91       	pop	r28
    2f0e:	df 91       	pop	r29
    2f10:	08 95       	ret

00002f12 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2f12:	df 93       	push	r29
    2f14:	cf 93       	push	r28
    2f16:	00 d0       	rcall	.+0      	; 0x2f18 <LCD_displayStringRowColumn+0x6>
    2f18:	00 d0       	rcall	.+0      	; 0x2f1a <LCD_displayStringRowColumn+0x8>
    2f1a:	cd b7       	in	r28, 0x3d	; 61
    2f1c:	de b7       	in	r29, 0x3e	; 62
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	6a 83       	std	Y+2, r22	; 0x02
    2f22:	5c 83       	std	Y+4, r21	; 0x04
    2f24:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2f26:	89 81       	ldd	r24, Y+1	; 0x01
    2f28:	6a 81       	ldd	r22, Y+2	; 0x02
    2f2a:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f30:	9c 81       	ldd	r25, Y+4	; 0x04
    2f32:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <LCD_displayString>
}
    2f36:	0f 90       	pop	r0
    2f38:	0f 90       	pop	r0
    2f3a:	0f 90       	pop	r0
    2f3c:	0f 90       	pop	r0
    2f3e:	cf 91       	pop	r28
    2f40:	df 91       	pop	r29
    2f42:	08 95       	ret

00002f44 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(sint64 data)
{
    2f44:	df 93       	push	r29
    2f46:	cf 93       	push	r28
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
    2f4c:	68 97       	sbiw	r28, 0x18	; 24
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	29 8b       	std	Y+17, r18	; 0x11
    2f5a:	3a 8b       	std	Y+18, r19	; 0x12
    2f5c:	4b 8b       	std	Y+19, r20	; 0x13
    2f5e:	5c 8b       	std	Y+20, r21	; 0x14
    2f60:	6d 8b       	std	Y+21, r22	; 0x15
    2f62:	7e 8b       	std	Y+22, r23	; 0x16
    2f64:	8f 8b       	std	Y+23, r24	; 0x17
    2f66:	98 8f       	std	Y+24, r25	; 0x18
   char buff[16]; /* String to hold the ascii result */

   sprintf(buff,"%ld",data);//itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2f68:	8d b7       	in	r24, 0x3d	; 61
    2f6a:	9e b7       	in	r25, 0x3e	; 62
    2f6c:	0c 97       	sbiw	r24, 0x0c	; 12
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	f8 94       	cli
    2f72:	9e bf       	out	0x3e, r25	; 62
    2f74:	0f be       	out	0x3f, r0	; 63
    2f76:	8d bf       	out	0x3d, r24	; 61
    2f78:	ed b7       	in	r30, 0x3d	; 61
    2f7a:	fe b7       	in	r31, 0x3e	; 62
    2f7c:	31 96       	adiw	r30, 0x01	; 1
    2f7e:	ce 01       	movw	r24, r28
    2f80:	01 96       	adiw	r24, 0x01	; 1
    2f82:	91 83       	std	Z+1, r25	; 0x01
    2f84:	80 83       	st	Z, r24
    2f86:	80 e6       	ldi	r24, 0x60	; 96
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	93 83       	std	Z+3, r25	; 0x03
    2f8c:	82 83       	std	Z+2, r24	; 0x02
    2f8e:	89 89       	ldd	r24, Y+17	; 0x11
    2f90:	84 83       	std	Z+4, r24	; 0x04
    2f92:	8a 89       	ldd	r24, Y+18	; 0x12
    2f94:	85 83       	std	Z+5, r24	; 0x05
    2f96:	8b 89       	ldd	r24, Y+19	; 0x13
    2f98:	86 83       	std	Z+6, r24	; 0x06
    2f9a:	8c 89       	ldd	r24, Y+20	; 0x14
    2f9c:	87 83       	std	Z+7, r24	; 0x07
    2f9e:	8d 89       	ldd	r24, Y+21	; 0x15
    2fa0:	80 87       	std	Z+8, r24	; 0x08
    2fa2:	8e 89       	ldd	r24, Y+22	; 0x16
    2fa4:	81 87       	std	Z+9, r24	; 0x09
    2fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    2fa8:	82 87       	std	Z+10, r24	; 0x0a
    2faa:	88 8d       	ldd	r24, Y+24	; 0x18
    2fac:	83 87       	std	Z+11, r24	; 0x0b
    2fae:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <sprintf>
    2fb2:	8d b7       	in	r24, 0x3d	; 61
    2fb4:	9e b7       	in	r25, 0x3e	; 62
    2fb6:	0c 96       	adiw	r24, 0x0c	; 12
    2fb8:	0f b6       	in	r0, 0x3f	; 63
    2fba:	f8 94       	cli
    2fbc:	9e bf       	out	0x3e, r25	; 62
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	8d bf       	out	0x3d, r24	; 61
   LCD_displayString(buff); /* Display the string */
    2fc2:	ce 01       	movw	r24, r28
    2fc4:	01 96       	adiw	r24, 0x01	; 1
    2fc6:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <LCD_displayString>
}
    2fca:	68 96       	adiw	r28, 0x18	; 24
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	f8 94       	cli
    2fd0:	de bf       	out	0x3e, r29	; 62
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	cf 91       	pop	r28
    2fd8:	df 91       	pop	r29
    2fda:	08 95       	ret

00002fdc <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2fdc:	df 93       	push	r29
    2fde:	cf 93       	push	r28
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <LCD_sendCommand>
}
    2fea:	cf 91       	pop	r28
    2fec:	df 91       	pop	r29
    2fee:	08 95       	ret

00002ff0 <Buzzer_init>:

#include "BUZZER.h"
#include "../../MCAL/GPIO/gpio.h"

void Buzzer_init(void)
{
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    2ff8:	82 e0       	ldi	r24, 0x02	; 2
    2ffa:	65 e0       	ldi	r22, 0x05	; 5
    2ffc:	41 e0       	ldi	r20, 0x01	; 1
    2ffe:	0e 94 fa 07 	call	0xff4	; 0xff4 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    3002:	82 e0       	ldi	r24, 0x02	; 2
    3004:	65 e0       	ldi	r22, 0x05	; 5
    3006:	40 e0       	ldi	r20, 0x00	; 0
    3008:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    300c:	cf 91       	pop	r28
    300e:	df 91       	pop	r29
    3010:	08 95       	ret

00003012 <Buzzer_on>:

void Buzzer_on(void)
{
    3012:	df 93       	push	r29
    3014:	cf 93       	push	r28
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    301a:	82 e0       	ldi	r24, 0x02	; 2
    301c:	65 e0       	ldi	r22, 0x05	; 5
    301e:	41 e0       	ldi	r20, 0x01	; 1
    3020:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    3024:	cf 91       	pop	r28
    3026:	df 91       	pop	r29
    3028:	08 95       	ret

0000302a <Buzzer_off>:

void Buzzer_off(void)
{
    302a:	df 93       	push	r29
    302c:	cf 93       	push	r28
    302e:	cd b7       	in	r28, 0x3d	; 61
    3030:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    3032:	82 e0       	ldi	r24, 0x02	; 2
    3034:	65 e0       	ldi	r22, 0x05	; 5
    3036:	40 e0       	ldi	r20, 0x00	; 0
    3038:	0e 94 e5 08 	call	0x11ca	; 0x11ca <GPIO_writePin>
}
    303c:	cf 91       	pop	r28
    303e:	df 91       	pop	r29
    3040:	08 95       	ret

00003042 <MCAL_Init>:
#include <util/delay.h>

extern g_edgeCount, g_timeHigh;

void MCAL_Init()
{
    3042:	df 93       	push	r29
    3044:	cf 93       	push	r28
    3046:	cd b7       	in	r28, 0x3d	; 61
    3048:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<7);
    304a:	af e5       	ldi	r26, 0x5F	; 95
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	ef e5       	ldi	r30, 0x5F	; 95
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	80 68       	ori	r24, 0x80	; 128
    3056:	8c 93       	st	X, r24
}
    3058:	cf 91       	pop	r28
    305a:	df 91       	pop	r29
    305c:	08 95       	ret

0000305e <HAL_Init>:

void HAL_Init(void)
{
    305e:	df 93       	push	r29
    3060:	cf 93       	push	r28
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    3066:	0e 94 76 0d 	call	0x1aec	; 0x1aec <LCD_init>
	Ultrasonic_init();
    306a:	0e 94 38 0b 	call	0x1670	; 0x1670 <Ultrasonic_init>
	Buzzer_init();
    306e:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <Buzzer_init>
	LED_Init();
    3072:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <LED_Init>
}
    3076:	cf 91       	pop	r28
    3078:	df 91       	pop	r29
    307a:	08 95       	ret

0000307c <LCD_constant_msg>:

void LCD_constant_msg(void)
{
    307c:	df 93       	push	r29
    307e:	cf 93       	push	r28
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
	LCD_displayString("Distance=    cm");
    3084:	84 e6       	ldi	r24, 0x64	; 100
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <LCD_displayString>

}
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <LCD_Print_Distance>:

void LCD_Print_Distance(void)
{
    3092:	af 92       	push	r10
    3094:	bf 92       	push	r11
    3096:	cf 92       	push	r12
    3098:	df 92       	push	r13
    309a:	ef 92       	push	r14
    309c:	ff 92       	push	r15
    309e:	0f 93       	push	r16
    30a0:	1f 93       	push	r17
    30a2:	df 93       	push	r29
    30a4:	cf 93       	push	r28
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
    30aa:	6e 97       	sbiw	r28, 0x1e	; 30
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	f8 94       	cli
    30b0:	de bf       	out	0x3e, r29	; 62
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	cd bf       	out	0x3d, r28	; 61
	LCD_moveCursor(0,9);
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	69 e0       	ldi	r22, 0x09	; 9
    30ba:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <LCD_moveCursor>
	uint16 distance = Ultrasonic_readDistance();
    30be:	0e 94 2e 0c 	call	0x185c	; 0x185c <Ultrasonic_readDistance>
    30c2:	9e 8f       	std	Y+30, r25	; 0x1e
    30c4:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_intgerToString(distance);
    30c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30ca:	5c 01       	movw	r10, r24
    30cc:	cc 24       	eor	r12, r12
    30ce:	dd 24       	eor	r13, r13
    30d0:	ee 24       	eor	r14, r14
    30d2:	ff 24       	eor	r15, r15
    30d4:	87 01       	movw	r16, r14
    30d6:	2a 2d       	mov	r18, r10
    30d8:	3b 2d       	mov	r19, r11
    30da:	4c 2d       	mov	r20, r12
    30dc:	5d 2d       	mov	r21, r13
    30de:	6e 2d       	mov	r22, r14
    30e0:	7f 2d       	mov	r23, r15
    30e2:	80 2f       	mov	r24, r16
    30e4:	91 2f       	mov	r25, r17
    30e6:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <LCD_intgerToString>
	if(distance <= 5)
    30ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30ee:	86 30       	cpi	r24, 0x06	; 6
    30f0:	91 05       	cpc	r25, r1
    30f2:	08 f0       	brcs	.+2      	; 0x30f6 <LCD_Print_Distance+0x64>
    30f4:	f1 c0       	rjmp	.+482    	; 0x32d8 <LCD_Print_Distance+0x246>
	{
		LCD_displayString("  ");
    30f6:	84 e7       	ldi	r24, 0x74	; 116
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <LCD_displayString>
		Buzzer_on();
    30fe:	0e 94 09 18 	call	0x3012	; 0x3012 <Buzzer_on>
		LCD_STOP_MSG();
    3102:	0e 94 ff 19 	call	0x33fe	; 0x33fe <LCD_STOP_MSG>
		TURN_ALL_LEDS_ON();
    3106:	0e 94 df 19 	call	0x33be	; 0x33be <TURN_ALL_LEDS_ON>
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	a8 e4       	ldi	r26, 0x48	; 72
    3110:	b3 e4       	ldi	r27, 0x43	; 67
    3112:	89 8f       	std	Y+25, r24	; 0x19
    3114:	9a 8f       	std	Y+26, r25	; 0x1a
    3116:	ab 8f       	std	Y+27, r26	; 0x1b
    3118:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311a:	69 8d       	ldd	r22, Y+25	; 0x19
    311c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    311e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3120:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	4a ef       	ldi	r20, 0xFA	; 250
    3128:	54 e4       	ldi	r21, 0x44	; 68
    312a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	8d 8b       	std	Y+21, r24	; 0x15
    3134:	9e 8b       	std	Y+22, r25	; 0x16
    3136:	af 8b       	std	Y+23, r26	; 0x17
    3138:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    313a:	6d 89       	ldd	r22, Y+21	; 0x15
    313c:	7e 89       	ldd	r23, Y+22	; 0x16
    313e:	8f 89       	ldd	r24, Y+23	; 0x17
    3140:	98 8d       	ldd	r25, Y+24	; 0x18
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e8       	ldi	r20, 0x80	; 128
    3148:	5f e3       	ldi	r21, 0x3F	; 63
    314a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    314e:	88 23       	and	r24, r24
    3150:	2c f4       	brge	.+10     	; 0x315c <LCD_Print_Distance+0xca>
		__ticks = 1;
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	9c 8b       	std	Y+20, r25	; 0x14
    3158:	8b 8b       	std	Y+19, r24	; 0x13
    315a:	3f c0       	rjmp	.+126    	; 0x31da <LCD_Print_Distance+0x148>
	else if (__tmp > 65535)
    315c:	6d 89       	ldd	r22, Y+21	; 0x15
    315e:	7e 89       	ldd	r23, Y+22	; 0x16
    3160:	8f 89       	ldd	r24, Y+23	; 0x17
    3162:	98 8d       	ldd	r25, Y+24	; 0x18
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	3f ef       	ldi	r19, 0xFF	; 255
    3168:	4f e7       	ldi	r20, 0x7F	; 127
    316a:	57 e4       	ldi	r21, 0x47	; 71
    316c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3170:	18 16       	cp	r1, r24
    3172:	4c f5       	brge	.+82     	; 0x31c6 <LCD_Print_Distance+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3174:	69 8d       	ldd	r22, Y+25	; 0x19
    3176:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3178:	8b 8d       	ldd	r24, Y+27	; 0x1b
    317a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	40 e2       	ldi	r20, 0x20	; 32
    3182:	51 e4       	ldi	r21, 0x41	; 65
    3184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	bc 01       	movw	r22, r24
    318e:	cd 01       	movw	r24, r26
    3190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	9c 8b       	std	Y+20, r25	; 0x14
    319a:	8b 8b       	std	Y+19, r24	; 0x13
    319c:	0f c0       	rjmp	.+30     	; 0x31bc <LCD_Print_Distance+0x12a>
    319e:	88 ec       	ldi	r24, 0xC8	; 200
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	9a 8b       	std	Y+18, r25	; 0x12
    31a4:	89 8b       	std	Y+17, r24	; 0x11
    31a6:	89 89       	ldd	r24, Y+17	; 0x11
    31a8:	9a 89       	ldd	r25, Y+18	; 0x12
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	f1 f7       	brne	.-4      	; 0x31aa <LCD_Print_Distance+0x118>
    31ae:	9a 8b       	std	Y+18, r25	; 0x12
    31b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b2:	8b 89       	ldd	r24, Y+19	; 0x13
    31b4:	9c 89       	ldd	r25, Y+20	; 0x14
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	9c 8b       	std	Y+20, r25	; 0x14
    31ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31bc:	8b 89       	ldd	r24, Y+19	; 0x13
    31be:	9c 89       	ldd	r25, Y+20	; 0x14
    31c0:	00 97       	sbiw	r24, 0x00	; 0
    31c2:	69 f7       	brne	.-38     	; 0x319e <LCD_Print_Distance+0x10c>
    31c4:	14 c0       	rjmp	.+40     	; 0x31ee <LCD_Print_Distance+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c6:	6d 89       	ldd	r22, Y+21	; 0x15
    31c8:	7e 89       	ldd	r23, Y+22	; 0x16
    31ca:	8f 89       	ldd	r24, Y+23	; 0x17
    31cc:	98 8d       	ldd	r25, Y+24	; 0x18
    31ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	9c 8b       	std	Y+20, r25	; 0x14
    31d8:	8b 8b       	std	Y+19, r24	; 0x13
    31da:	8b 89       	ldd	r24, Y+19	; 0x13
    31dc:	9c 89       	ldd	r25, Y+20	; 0x14
    31de:	98 8b       	std	Y+16, r25	; 0x10
    31e0:	8f 87       	std	Y+15, r24	; 0x0f
    31e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    31e4:	98 89       	ldd	r25, Y+16	; 0x10
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	f1 f7       	brne	.-4      	; 0x31e6 <LCD_Print_Distance+0x154>
    31ea:	98 8b       	std	Y+16, r25	; 0x10
    31ec:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		TURN_ALL_LEDS_OFF();
    31ee:	0e 94 ef 19 	call	0x33de	; 0x33de <TURN_ALL_LEDS_OFF>
    31f2:	80 e0       	ldi	r24, 0x00	; 0
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	a8 e4       	ldi	r26, 0x48	; 72
    31f8:	b3 e4       	ldi	r27, 0x43	; 67
    31fa:	8b 87       	std	Y+11, r24	; 0x0b
    31fc:	9c 87       	std	Y+12, r25	; 0x0c
    31fe:	ad 87       	std	Y+13, r26	; 0x0d
    3200:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3202:	6b 85       	ldd	r22, Y+11	; 0x0b
    3204:	7c 85       	ldd	r23, Y+12	; 0x0c
    3206:	8d 85       	ldd	r24, Y+13	; 0x0d
    3208:	9e 85       	ldd	r25, Y+14	; 0x0e
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	4a ef       	ldi	r20, 0xFA	; 250
    3210:	54 e4       	ldi	r21, 0x44	; 68
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	8f 83       	std	Y+7, r24	; 0x07
    321c:	98 87       	std	Y+8, r25	; 0x08
    321e:	a9 87       	std	Y+9, r26	; 0x09
    3220:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3222:	6f 81       	ldd	r22, Y+7	; 0x07
    3224:	78 85       	ldd	r23, Y+8	; 0x08
    3226:	89 85       	ldd	r24, Y+9	; 0x09
    3228:	9a 85       	ldd	r25, Y+10	; 0x0a
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	40 e8       	ldi	r20, 0x80	; 128
    3230:	5f e3       	ldi	r21, 0x3F	; 63
    3232:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3236:	88 23       	and	r24, r24
    3238:	2c f4       	brge	.+10     	; 0x3244 <LCD_Print_Distance+0x1b2>
		__ticks = 1;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	9e 83       	std	Y+6, r25	; 0x06
    3240:	8d 83       	std	Y+5, r24	; 0x05
    3242:	3f c0       	rjmp	.+126    	; 0x32c2 <LCD_Print_Distance+0x230>
	else if (__tmp > 65535)
    3244:	6f 81       	ldd	r22, Y+7	; 0x07
    3246:	78 85       	ldd	r23, Y+8	; 0x08
    3248:	89 85       	ldd	r24, Y+9	; 0x09
    324a:	9a 85       	ldd	r25, Y+10	; 0x0a
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	3f ef       	ldi	r19, 0xFF	; 255
    3250:	4f e7       	ldi	r20, 0x7F	; 127
    3252:	57 e4       	ldi	r21, 0x47	; 71
    3254:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3258:	18 16       	cp	r1, r24
    325a:	4c f5       	brge	.+82     	; 0x32ae <LCD_Print_Distance+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325c:	6b 85       	ldd	r22, Y+11	; 0x0b
    325e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3260:	8d 85       	ldd	r24, Y+13	; 0x0d
    3262:	9e 85       	ldd	r25, Y+14	; 0x0e
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	40 e2       	ldi	r20, 0x20	; 32
    326a:	51 e4       	ldi	r21, 0x41	; 65
    326c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	bc 01       	movw	r22, r24
    3276:	cd 01       	movw	r24, r26
    3278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	9e 83       	std	Y+6, r25	; 0x06
    3282:	8d 83       	std	Y+5, r24	; 0x05
    3284:	0f c0       	rjmp	.+30     	; 0x32a4 <LCD_Print_Distance+0x212>
    3286:	88 ec       	ldi	r24, 0xC8	; 200
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	9c 83       	std	Y+4, r25	; 0x04
    328c:	8b 83       	std	Y+3, r24	; 0x03
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	9c 81       	ldd	r25, Y+4	; 0x04
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <LCD_Print_Distance+0x200>
    3296:	9c 83       	std	Y+4, r25	; 0x04
    3298:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329a:	8d 81       	ldd	r24, Y+5	; 0x05
    329c:	9e 81       	ldd	r25, Y+6	; 0x06
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	9e 83       	std	Y+6, r25	; 0x06
    32a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a4:	8d 81       	ldd	r24, Y+5	; 0x05
    32a6:	9e 81       	ldd	r25, Y+6	; 0x06
    32a8:	00 97       	sbiw	r24, 0x00	; 0
    32aa:	69 f7       	brne	.-38     	; 0x3286 <LCD_Print_Distance+0x1f4>
    32ac:	77 c0       	rjmp	.+238    	; 0x339c <LCD_Print_Distance+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ae:	6f 81       	ldd	r22, Y+7	; 0x07
    32b0:	78 85       	ldd	r23, Y+8	; 0x08
    32b2:	89 85       	ldd	r24, Y+9	; 0x09
    32b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	9e 83       	std	Y+6, r25	; 0x06
    32c0:	8d 83       	std	Y+5, r24	; 0x05
    32c2:	8d 81       	ldd	r24, Y+5	; 0x05
    32c4:	9e 81       	ldd	r25, Y+6	; 0x06
    32c6:	9a 83       	std	Y+2, r25	; 0x02
    32c8:	89 83       	std	Y+1, r24	; 0x01
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	9a 81       	ldd	r25, Y+2	; 0x02
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	f1 f7       	brne	.-4      	; 0x32ce <LCD_Print_Distance+0x23c>
    32d2:	9a 83       	std	Y+2, r25	; 0x02
    32d4:	89 83       	std	Y+1, r24	; 0x01
    32d6:	62 c0       	rjmp	.+196    	; 0x339c <LCD_Print_Distance+0x30a>
		_delay_ms(200);
	}
	else if(distance <= 10)
    32d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32dc:	8b 30       	cpi	r24, 0x0B	; 11
    32de:	91 05       	cpc	r25, r1
    32e0:	a0 f4       	brcc	.+40     	; 0x330a <LCD_Print_Distance+0x278>
	{
		if(distance != 10)
    32e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32e6:	8a 30       	cpi	r24, 0x0A	; 10
    32e8:	91 05       	cpc	r25, r1
    32ea:	29 f0       	breq	.+10     	; 0x32f6 <LCD_Print_Distance+0x264>
			LCD_displayString("  ");
    32ec:	84 e7       	ldi	r24, 0x74	; 116
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <LCD_displayString>
    32f4:	03 c0       	rjmp	.+6      	; 0x32fc <LCD_Print_Distance+0x26a>
		else
			LCD_displayCharacter(' ');
    32f6:	80 e2       	ldi	r24, 0x20	; 32
    32f8:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_displayCharacter>
		LCD_REMOVE_STOP_MSG();
    32fc:	0e 94 12 1a 	call	0x3424	; 0x3424 <LCD_REMOVE_STOP_MSG>
		TURN_ALL_LEDS_ON();
    3300:	0e 94 df 19 	call	0x33be	; 0x33be <TURN_ALL_LEDS_ON>
		Buzzer_off();
    3304:	0e 94 15 18 	call	0x302a	; 0x302a <Buzzer_off>
    3308:	49 c0       	rjmp	.+146    	; 0x339c <LCD_Print_Distance+0x30a>
	}
	else if(distance <= 15)
    330a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    330c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    330e:	80 31       	cpi	r24, 0x10	; 16
    3310:	91 05       	cpc	r25, r1
    3312:	88 f4       	brcc	.+34     	; 0x3336 <LCD_Print_Distance+0x2a4>
	{
		LCD_displayCharacter(' ');
    3314:	80 e2       	ldi	r24, 0x20	; 32
    3316:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_displayCharacter>
		LED_On(LED_RED);
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <LED_On>
		LED_On(LED_GREEN);
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <LED_On>
		LED_Off(LED_BLUE);
    3326:	82 e0       	ldi	r24, 0x02	; 2
    3328:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LED_Off>
		Buzzer_off();
    332c:	0e 94 15 18 	call	0x302a	; 0x302a <Buzzer_off>
		LCD_REMOVE_STOP_MSG();
    3330:	0e 94 12 1a 	call	0x3424	; 0x3424 <LCD_REMOVE_STOP_MSG>
    3334:	33 c0       	rjmp	.+102    	; 0x339c <LCD_Print_Distance+0x30a>
	}
	else if(distance <= 20)
    3336:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3338:	9e 8d       	ldd	r25, Y+30	; 0x1e
    333a:	85 31       	cpi	r24, 0x15	; 21
    333c:	91 05       	cpc	r25, r1
    333e:	88 f4       	brcc	.+34     	; 0x3362 <LCD_Print_Distance+0x2d0>
	{
		LCD_displayCharacter(' ');
    3340:	80 e2       	ldi	r24, 0x20	; 32
    3342:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_displayCharacter>
		LED_On(LED_RED);
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <LED_On>
		LED_Off(LED_GREEN);
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LED_Off>
		LED_Off(LED_BLUE);
    3352:	82 e0       	ldi	r24, 0x02	; 2
    3354:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LED_Off>
		Buzzer_off();
    3358:	0e 94 15 18 	call	0x302a	; 0x302a <Buzzer_off>
		LCD_REMOVE_STOP_MSG();
    335c:	0e 94 12 1a 	call	0x3424	; 0x3424 <LCD_REMOVE_STOP_MSG>
    3360:	1d c0       	rjmp	.+58     	; 0x339c <LCD_Print_Distance+0x30a>
	}
	else if(distance > 20)
    3362:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3364:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3366:	85 31       	cpi	r24, 0x15	; 21
    3368:	91 05       	cpc	r25, r1
    336a:	c0 f0       	brcs	.+48     	; 0x339c <LCD_Print_Distance+0x30a>
	{
		if(distance <= 99)
    336c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    336e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3370:	84 36       	cpi	r24, 0x64	; 100
    3372:	91 05       	cpc	r25, r1
    3374:	18 f4       	brcc	.+6      	; 0x337c <LCD_Print_Distance+0x2ea>
			LCD_displayCharacter(' ');
    3376:	80 e2       	ldi	r24, 0x20	; 32
    3378:	0e 94 a3 12 	call	0x2546	; 0x2546 <LCD_displayCharacter>

		TURN_ALL_LEDS_OFF();
    337c:	0e 94 ef 19 	call	0x33de	; 0x33de <TURN_ALL_LEDS_OFF>
		Buzzer_off();
    3380:	0e 94 15 18 	call	0x302a	; 0x302a <Buzzer_off>
		LCD_REMOVE_STOP_MSG();
    3384:	0e 94 12 1a 	call	0x3424	; 0x3424 <LCD_REMOVE_STOP_MSG>
		if(distance == 432)
    3388:	8d 8d       	ldd	r24, Y+29	; 0x1d
    338a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    338c:	21 e0       	ldi	r18, 0x01	; 1
    338e:	80 3b       	cpi	r24, 0xB0	; 176
    3390:	92 07       	cpc	r25, r18
    3392:	21 f4       	brne	.+8      	; 0x339c <LCD_Print_Distance+0x30a>
			LCD_displayString("432");
    3394:	87 e7       	ldi	r24, 0x77	; 119
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <LCD_displayString>
	}

}
    339c:	6e 96       	adiw	r28, 0x1e	; 30
    339e:	0f b6       	in	r0, 0x3f	; 63
    33a0:	f8 94       	cli
    33a2:	de bf       	out	0x3e, r29	; 62
    33a4:	0f be       	out	0x3f, r0	; 63
    33a6:	cd bf       	out	0x3d, r28	; 61
    33a8:	cf 91       	pop	r28
    33aa:	df 91       	pop	r29
    33ac:	1f 91       	pop	r17
    33ae:	0f 91       	pop	r16
    33b0:	ff 90       	pop	r15
    33b2:	ef 90       	pop	r14
    33b4:	df 90       	pop	r13
    33b6:	cf 90       	pop	r12
    33b8:	bf 90       	pop	r11
    33ba:	af 90       	pop	r10
    33bc:	08 95       	ret

000033be <TURN_ALL_LEDS_ON>:

void TURN_ALL_LEDS_ON(void)
{
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
	LED_On(LED_RED);
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <LED_On>
	LED_On(LED_GREEN);
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <LED_On>
	LED_On(LED_BLUE);
    33d2:	82 e0       	ldi	r24, 0x02	; 2
    33d4:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <LED_On>
}
    33d8:	cf 91       	pop	r28
    33da:	df 91       	pop	r29
    33dc:	08 95       	ret

000033de <TURN_ALL_LEDS_OFF>:

void TURN_ALL_LEDS_OFF(void)
{
    33de:	df 93       	push	r29
    33e0:	cf 93       	push	r28
    33e2:	cd b7       	in	r28, 0x3d	; 61
    33e4:	de b7       	in	r29, 0x3e	; 62
	LED_Off(LED_RED);
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LED_Off>
	LED_Off(LED_GREEN);
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LED_Off>
	LED_Off(LED_BLUE);
    33f2:	82 e0       	ldi	r24, 0x02	; 2
    33f4:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <LED_Off>
}
    33f8:	cf 91       	pop	r28
    33fa:	df 91       	pop	r29
    33fc:	08 95       	ret

000033fe <LCD_STOP_MSG>:

void LCD_STOP_MSG(void)
{
    33fe:	df 93       	push	r29
    3400:	cf 93       	push	r28
    3402:	cd b7       	in	r28, 0x3d	; 61
    3404:	de b7       	in	r29, 0x3e	; 62
	LCD_moveCursor(1,6);
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	66 e0       	ldi	r22, 0x06	; 6
    340a:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <LCD_moveCursor>
	LCD_displayString("STOP!");
    340e:	8b e7       	ldi	r24, 0x7B	; 123
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <LCD_displayString>
	LCD_moveCursor(0,9);
    3416:	80 e0       	ldi	r24, 0x00	; 0
    3418:	69 e0       	ldi	r22, 0x09	; 9
    341a:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <LCD_moveCursor>
}
    341e:	cf 91       	pop	r28
    3420:	df 91       	pop	r29
    3422:	08 95       	ret

00003424 <LCD_REMOVE_STOP_MSG>:

void LCD_REMOVE_STOP_MSG(void)
{
    3424:	df 93       	push	r29
    3426:	cf 93       	push	r28
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
	LCD_moveCursor(1,6);
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	66 e0       	ldi	r22, 0x06	; 6
    3430:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <LCD_moveCursor>
	LCD_displayString("     ");
    3434:	81 e8       	ldi	r24, 0x81	; 129
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <LCD_displayString>
	LCD_moveCursor(0,9);
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	69 e0       	ldi	r22, 0x09	; 9
    3440:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <LCD_moveCursor>
}
    3444:	cf 91       	pop	r28
    3446:	df 91       	pop	r29
    3448:	08 95       	ret

0000344a <main>:

#include "APP.h"
#include <util/delay.h>

int main()
{
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	2e 97       	sbiw	r28, 0x0e	; 14
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61

	MCAL_Init();
    345e:	0e 94 21 18 	call	0x3042	; 0x3042 <MCAL_Init>
	HAL_Init();
    3462:	0e 94 2f 18 	call	0x305e	; 0x305e <HAL_Init>
	LCD_constant_msg();
    3466:	0e 94 3e 18 	call	0x307c	; 0x307c <LCD_constant_msg>


	while(1)
	{
		LCD_Print_Distance();
    346a:	0e 94 49 18 	call	0x3092	; 0x3092 <LCD_Print_Distance>
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	a0 e8       	ldi	r26, 0x80	; 128
    3474:	bf e3       	ldi	r27, 0x3F	; 63
    3476:	8b 87       	std	Y+11, r24	; 0x0b
    3478:	9c 87       	std	Y+12, r25	; 0x0c
    347a:	ad 87       	std	Y+13, r26	; 0x0d
    347c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    347e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3480:	7c 85       	ldd	r23, Y+12	; 0x0c
    3482:	8d 85       	ldd	r24, Y+13	; 0x0d
    3484:	9e 85       	ldd	r25, Y+14	; 0x0e
    3486:	20 e0       	ldi	r18, 0x00	; 0
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	4a ef       	ldi	r20, 0xFA	; 250
    348c:	54 e4       	ldi	r21, 0x44	; 68
    348e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	8f 83       	std	Y+7, r24	; 0x07
    3498:	98 87       	std	Y+8, r25	; 0x08
    349a:	a9 87       	std	Y+9, r26	; 0x09
    349c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    349e:	6f 81       	ldd	r22, Y+7	; 0x07
    34a0:	78 85       	ldd	r23, Y+8	; 0x08
    34a2:	89 85       	ldd	r24, Y+9	; 0x09
    34a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	40 e8       	ldi	r20, 0x80	; 128
    34ac:	5f e3       	ldi	r21, 0x3F	; 63
    34ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34b2:	88 23       	and	r24, r24
    34b4:	2c f4       	brge	.+10     	; 0x34c0 <main+0x76>
		__ticks = 1;
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	9e 83       	std	Y+6, r25	; 0x06
    34bc:	8d 83       	std	Y+5, r24	; 0x05
    34be:	3f c0       	rjmp	.+126    	; 0x353e <main+0xf4>
	else if (__tmp > 65535)
    34c0:	6f 81       	ldd	r22, Y+7	; 0x07
    34c2:	78 85       	ldd	r23, Y+8	; 0x08
    34c4:	89 85       	ldd	r24, Y+9	; 0x09
    34c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	3f ef       	ldi	r19, 0xFF	; 255
    34cc:	4f e7       	ldi	r20, 0x7F	; 127
    34ce:	57 e4       	ldi	r21, 0x47	; 71
    34d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34d4:	18 16       	cp	r1, r24
    34d6:	4c f5       	brge	.+82     	; 0x352a <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    34da:	7c 85       	ldd	r23, Y+12	; 0x0c
    34dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    34de:	9e 85       	ldd	r25, Y+14	; 0x0e
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	40 e2       	ldi	r20, 0x20	; 32
    34e6:	51 e4       	ldi	r21, 0x41	; 65
    34e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	bc 01       	movw	r22, r24
    34f2:	cd 01       	movw	r24, r26
    34f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	9e 83       	std	Y+6, r25	; 0x06
    34fe:	8d 83       	std	Y+5, r24	; 0x05
    3500:	0f c0       	rjmp	.+30     	; 0x3520 <main+0xd6>
    3502:	88 ec       	ldi	r24, 0xC8	; 200
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	9c 83       	std	Y+4, r25	; 0x04
    3508:	8b 83       	std	Y+3, r24	; 0x03
    350a:	8b 81       	ldd	r24, Y+3	; 0x03
    350c:	9c 81       	ldd	r25, Y+4	; 0x04
    350e:	01 97       	sbiw	r24, 0x01	; 1
    3510:	f1 f7       	brne	.-4      	; 0x350e <main+0xc4>
    3512:	9c 83       	std	Y+4, r25	; 0x04
    3514:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3516:	8d 81       	ldd	r24, Y+5	; 0x05
    3518:	9e 81       	ldd	r25, Y+6	; 0x06
    351a:	01 97       	sbiw	r24, 0x01	; 1
    351c:	9e 83       	std	Y+6, r25	; 0x06
    351e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3520:	8d 81       	ldd	r24, Y+5	; 0x05
    3522:	9e 81       	ldd	r25, Y+6	; 0x06
    3524:	00 97       	sbiw	r24, 0x00	; 0
    3526:	69 f7       	brne	.-38     	; 0x3502 <main+0xb8>
    3528:	a0 cf       	rjmp	.-192    	; 0x346a <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    352a:	6f 81       	ldd	r22, Y+7	; 0x07
    352c:	78 85       	ldd	r23, Y+8	; 0x08
    352e:	89 85       	ldd	r24, Y+9	; 0x09
    3530:	9a 85       	ldd	r25, Y+10	; 0x0a
    3532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	9e 83       	std	Y+6, r25	; 0x06
    353c:	8d 83       	std	Y+5, r24	; 0x05
    353e:	8d 81       	ldd	r24, Y+5	; 0x05
    3540:	9e 81       	ldd	r25, Y+6	; 0x06
    3542:	9a 83       	std	Y+2, r25	; 0x02
    3544:	89 83       	std	Y+1, r24	; 0x01
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	9a 81       	ldd	r25, Y+2	; 0x02
    354a:	01 97       	sbiw	r24, 0x01	; 1
    354c:	f1 f7       	brne	.-4      	; 0x354a <main+0x100>
    354e:	9a 83       	std	Y+2, r25	; 0x02
    3550:	89 83       	std	Y+1, r24	; 0x01
    3552:	8b cf       	rjmp	.-234    	; 0x346a <main+0x20>

00003554 <__prologue_saves__>:
    3554:	2f 92       	push	r2
    3556:	3f 92       	push	r3
    3558:	4f 92       	push	r4
    355a:	5f 92       	push	r5
    355c:	6f 92       	push	r6
    355e:	7f 92       	push	r7
    3560:	8f 92       	push	r8
    3562:	9f 92       	push	r9
    3564:	af 92       	push	r10
    3566:	bf 92       	push	r11
    3568:	cf 92       	push	r12
    356a:	df 92       	push	r13
    356c:	ef 92       	push	r14
    356e:	ff 92       	push	r15
    3570:	0f 93       	push	r16
    3572:	1f 93       	push	r17
    3574:	cf 93       	push	r28
    3576:	df 93       	push	r29
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
    357c:	ca 1b       	sub	r28, r26
    357e:	db 0b       	sbc	r29, r27
    3580:	0f b6       	in	r0, 0x3f	; 63
    3582:	f8 94       	cli
    3584:	de bf       	out	0x3e, r29	; 62
    3586:	0f be       	out	0x3f, r0	; 63
    3588:	cd bf       	out	0x3d, r28	; 61
    358a:	09 94       	ijmp

0000358c <__epilogue_restores__>:
    358c:	2a 88       	ldd	r2, Y+18	; 0x12
    358e:	39 88       	ldd	r3, Y+17	; 0x11
    3590:	48 88       	ldd	r4, Y+16	; 0x10
    3592:	5f 84       	ldd	r5, Y+15	; 0x0f
    3594:	6e 84       	ldd	r6, Y+14	; 0x0e
    3596:	7d 84       	ldd	r7, Y+13	; 0x0d
    3598:	8c 84       	ldd	r8, Y+12	; 0x0c
    359a:	9b 84       	ldd	r9, Y+11	; 0x0b
    359c:	aa 84       	ldd	r10, Y+10	; 0x0a
    359e:	b9 84       	ldd	r11, Y+9	; 0x09
    35a0:	c8 84       	ldd	r12, Y+8	; 0x08
    35a2:	df 80       	ldd	r13, Y+7	; 0x07
    35a4:	ee 80       	ldd	r14, Y+6	; 0x06
    35a6:	fd 80       	ldd	r15, Y+5	; 0x05
    35a8:	0c 81       	ldd	r16, Y+4	; 0x04
    35aa:	1b 81       	ldd	r17, Y+3	; 0x03
    35ac:	aa 81       	ldd	r26, Y+2	; 0x02
    35ae:	b9 81       	ldd	r27, Y+1	; 0x01
    35b0:	ce 0f       	add	r28, r30
    35b2:	d1 1d       	adc	r29, r1
    35b4:	0f b6       	in	r0, 0x3f	; 63
    35b6:	f8 94       	cli
    35b8:	de bf       	out	0x3e, r29	; 62
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	cd bf       	out	0x3d, r28	; 61
    35be:	ed 01       	movw	r28, r26
    35c0:	08 95       	ret

000035c2 <sprintf>:
    35c2:	ae e0       	ldi	r26, 0x0E	; 14
    35c4:	b0 e0       	ldi	r27, 0x00	; 0
    35c6:	e7 ee       	ldi	r30, 0xE7	; 231
    35c8:	fa e1       	ldi	r31, 0x1A	; 26
    35ca:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <__prologue_saves__+0x1c>
    35ce:	0d 89       	ldd	r16, Y+21	; 0x15
    35d0:	1e 89       	ldd	r17, Y+22	; 0x16
    35d2:	86 e0       	ldi	r24, 0x06	; 6
    35d4:	8c 83       	std	Y+4, r24	; 0x04
    35d6:	1a 83       	std	Y+2, r17	; 0x02
    35d8:	09 83       	std	Y+1, r16	; 0x01
    35da:	8f ef       	ldi	r24, 0xFF	; 255
    35dc:	9f e7       	ldi	r25, 0x7F	; 127
    35de:	9e 83       	std	Y+6, r25	; 0x06
    35e0:	8d 83       	std	Y+5, r24	; 0x05
    35e2:	9e 01       	movw	r18, r28
    35e4:	27 5e       	subi	r18, 0xE7	; 231
    35e6:	3f 4f       	sbci	r19, 0xFF	; 255
    35e8:	ce 01       	movw	r24, r28
    35ea:	01 96       	adiw	r24, 0x01	; 1
    35ec:	6f 89       	ldd	r22, Y+23	; 0x17
    35ee:	78 8d       	ldd	r23, Y+24	; 0x18
    35f0:	a9 01       	movw	r20, r18
    35f2:	0e 94 05 1b 	call	0x360a	; 0x360a <vfprintf>
    35f6:	2f 81       	ldd	r18, Y+7	; 0x07
    35f8:	38 85       	ldd	r19, Y+8	; 0x08
    35fa:	02 0f       	add	r16, r18
    35fc:	13 1f       	adc	r17, r19
    35fe:	f8 01       	movw	r30, r16
    3600:	10 82       	st	Z, r1
    3602:	2e 96       	adiw	r28, 0x0e	; 14
    3604:	e4 e0       	ldi	r30, 0x04	; 4
    3606:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <__epilogue_restores__+0x1c>

0000360a <vfprintf>:
    360a:	ab e0       	ldi	r26, 0x0B	; 11
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	eb e0       	ldi	r30, 0x0B	; 11
    3610:	fb e1       	ldi	r31, 0x1B	; 27
    3612:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__>
    3616:	3c 01       	movw	r6, r24
    3618:	2b 01       	movw	r4, r22
    361a:	5a 01       	movw	r10, r20
    361c:	fc 01       	movw	r30, r24
    361e:	17 82       	std	Z+7, r1	; 0x07
    3620:	16 82       	std	Z+6, r1	; 0x06
    3622:	83 81       	ldd	r24, Z+3	; 0x03
    3624:	81 fd       	sbrc	r24, 1
    3626:	03 c0       	rjmp	.+6      	; 0x362e <vfprintf+0x24>
    3628:	6f ef       	ldi	r22, 0xFF	; 255
    362a:	7f ef       	ldi	r23, 0xFF	; 255
    362c:	c6 c1       	rjmp	.+908    	; 0x39ba <vfprintf+0x3b0>
    362e:	9a e0       	ldi	r25, 0x0A	; 10
    3630:	89 2e       	mov	r8, r25
    3632:	1e 01       	movw	r2, r28
    3634:	08 94       	sec
    3636:	21 1c       	adc	r2, r1
    3638:	31 1c       	adc	r3, r1
    363a:	f3 01       	movw	r30, r6
    363c:	23 81       	ldd	r18, Z+3	; 0x03
    363e:	f2 01       	movw	r30, r4
    3640:	23 fd       	sbrc	r18, 3
    3642:	85 91       	lpm	r24, Z+
    3644:	23 ff       	sbrs	r18, 3
    3646:	81 91       	ld	r24, Z+
    3648:	2f 01       	movw	r4, r30
    364a:	88 23       	and	r24, r24
    364c:	09 f4       	brne	.+2      	; 0x3650 <vfprintf+0x46>
    364e:	b2 c1       	rjmp	.+868    	; 0x39b4 <vfprintf+0x3aa>
    3650:	85 32       	cpi	r24, 0x25	; 37
    3652:	39 f4       	brne	.+14     	; 0x3662 <vfprintf+0x58>
    3654:	23 fd       	sbrc	r18, 3
    3656:	85 91       	lpm	r24, Z+
    3658:	23 ff       	sbrs	r18, 3
    365a:	81 91       	ld	r24, Z+
    365c:	2f 01       	movw	r4, r30
    365e:	85 32       	cpi	r24, 0x25	; 37
    3660:	29 f4       	brne	.+10     	; 0x366c <vfprintf+0x62>
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	b3 01       	movw	r22, r6
    3666:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <fputc>
    366a:	e7 cf       	rjmp	.-50     	; 0x363a <vfprintf+0x30>
    366c:	98 2f       	mov	r25, r24
    366e:	ff 24       	eor	r15, r15
    3670:	ee 24       	eor	r14, r14
    3672:	99 24       	eor	r9, r9
    3674:	ff e1       	ldi	r31, 0x1F	; 31
    3676:	ff 15       	cp	r31, r15
    3678:	d0 f0       	brcs	.+52     	; 0x36ae <vfprintf+0xa4>
    367a:	9b 32       	cpi	r25, 0x2B	; 43
    367c:	69 f0       	breq	.+26     	; 0x3698 <vfprintf+0x8e>
    367e:	9c 32       	cpi	r25, 0x2C	; 44
    3680:	28 f4       	brcc	.+10     	; 0x368c <vfprintf+0x82>
    3682:	90 32       	cpi	r25, 0x20	; 32
    3684:	59 f0       	breq	.+22     	; 0x369c <vfprintf+0x92>
    3686:	93 32       	cpi	r25, 0x23	; 35
    3688:	91 f4       	brne	.+36     	; 0x36ae <vfprintf+0xa4>
    368a:	0e c0       	rjmp	.+28     	; 0x36a8 <vfprintf+0x9e>
    368c:	9d 32       	cpi	r25, 0x2D	; 45
    368e:	49 f0       	breq	.+18     	; 0x36a2 <vfprintf+0x98>
    3690:	90 33       	cpi	r25, 0x30	; 48
    3692:	69 f4       	brne	.+26     	; 0x36ae <vfprintf+0xa4>
    3694:	41 e0       	ldi	r20, 0x01	; 1
    3696:	24 c0       	rjmp	.+72     	; 0x36e0 <vfprintf+0xd6>
    3698:	52 e0       	ldi	r21, 0x02	; 2
    369a:	f5 2a       	or	r15, r21
    369c:	84 e0       	ldi	r24, 0x04	; 4
    369e:	f8 2a       	or	r15, r24
    36a0:	28 c0       	rjmp	.+80     	; 0x36f2 <vfprintf+0xe8>
    36a2:	98 e0       	ldi	r25, 0x08	; 8
    36a4:	f9 2a       	or	r15, r25
    36a6:	25 c0       	rjmp	.+74     	; 0x36f2 <vfprintf+0xe8>
    36a8:	e0 e1       	ldi	r30, 0x10	; 16
    36aa:	fe 2a       	or	r15, r30
    36ac:	22 c0       	rjmp	.+68     	; 0x36f2 <vfprintf+0xe8>
    36ae:	f7 fc       	sbrc	r15, 7
    36b0:	29 c0       	rjmp	.+82     	; 0x3704 <vfprintf+0xfa>
    36b2:	89 2f       	mov	r24, r25
    36b4:	80 53       	subi	r24, 0x30	; 48
    36b6:	8a 30       	cpi	r24, 0x0A	; 10
    36b8:	70 f4       	brcc	.+28     	; 0x36d6 <vfprintf+0xcc>
    36ba:	f6 fe       	sbrs	r15, 6
    36bc:	05 c0       	rjmp	.+10     	; 0x36c8 <vfprintf+0xbe>
    36be:	98 9c       	mul	r9, r8
    36c0:	90 2c       	mov	r9, r0
    36c2:	11 24       	eor	r1, r1
    36c4:	98 0e       	add	r9, r24
    36c6:	15 c0       	rjmp	.+42     	; 0x36f2 <vfprintf+0xe8>
    36c8:	e8 9c       	mul	r14, r8
    36ca:	e0 2c       	mov	r14, r0
    36cc:	11 24       	eor	r1, r1
    36ce:	e8 0e       	add	r14, r24
    36d0:	f0 e2       	ldi	r31, 0x20	; 32
    36d2:	ff 2a       	or	r15, r31
    36d4:	0e c0       	rjmp	.+28     	; 0x36f2 <vfprintf+0xe8>
    36d6:	9e 32       	cpi	r25, 0x2E	; 46
    36d8:	29 f4       	brne	.+10     	; 0x36e4 <vfprintf+0xda>
    36da:	f6 fc       	sbrc	r15, 6
    36dc:	6b c1       	rjmp	.+726    	; 0x39b4 <vfprintf+0x3aa>
    36de:	40 e4       	ldi	r20, 0x40	; 64
    36e0:	f4 2a       	or	r15, r20
    36e2:	07 c0       	rjmp	.+14     	; 0x36f2 <vfprintf+0xe8>
    36e4:	9c 36       	cpi	r25, 0x6C	; 108
    36e6:	19 f4       	brne	.+6      	; 0x36ee <vfprintf+0xe4>
    36e8:	50 e8       	ldi	r21, 0x80	; 128
    36ea:	f5 2a       	or	r15, r21
    36ec:	02 c0       	rjmp	.+4      	; 0x36f2 <vfprintf+0xe8>
    36ee:	98 36       	cpi	r25, 0x68	; 104
    36f0:	49 f4       	brne	.+18     	; 0x3704 <vfprintf+0xfa>
    36f2:	f2 01       	movw	r30, r4
    36f4:	23 fd       	sbrc	r18, 3
    36f6:	95 91       	lpm	r25, Z+
    36f8:	23 ff       	sbrs	r18, 3
    36fa:	91 91       	ld	r25, Z+
    36fc:	2f 01       	movw	r4, r30
    36fe:	99 23       	and	r25, r25
    3700:	09 f0       	breq	.+2      	; 0x3704 <vfprintf+0xfa>
    3702:	b8 cf       	rjmp	.-144    	; 0x3674 <vfprintf+0x6a>
    3704:	89 2f       	mov	r24, r25
    3706:	85 54       	subi	r24, 0x45	; 69
    3708:	83 30       	cpi	r24, 0x03	; 3
    370a:	18 f0       	brcs	.+6      	; 0x3712 <vfprintf+0x108>
    370c:	80 52       	subi	r24, 0x20	; 32
    370e:	83 30       	cpi	r24, 0x03	; 3
    3710:	38 f4       	brcc	.+14     	; 0x3720 <vfprintf+0x116>
    3712:	44 e0       	ldi	r20, 0x04	; 4
    3714:	50 e0       	ldi	r21, 0x00	; 0
    3716:	a4 0e       	add	r10, r20
    3718:	b5 1e       	adc	r11, r21
    371a:	5f e3       	ldi	r21, 0x3F	; 63
    371c:	59 83       	std	Y+1, r21	; 0x01
    371e:	0f c0       	rjmp	.+30     	; 0x373e <vfprintf+0x134>
    3720:	93 36       	cpi	r25, 0x63	; 99
    3722:	31 f0       	breq	.+12     	; 0x3730 <vfprintf+0x126>
    3724:	93 37       	cpi	r25, 0x73	; 115
    3726:	79 f0       	breq	.+30     	; 0x3746 <vfprintf+0x13c>
    3728:	93 35       	cpi	r25, 0x53	; 83
    372a:	09 f0       	breq	.+2      	; 0x372e <vfprintf+0x124>
    372c:	56 c0       	rjmp	.+172    	; 0x37da <vfprintf+0x1d0>
    372e:	20 c0       	rjmp	.+64     	; 0x3770 <vfprintf+0x166>
    3730:	f5 01       	movw	r30, r10
    3732:	80 81       	ld	r24, Z
    3734:	89 83       	std	Y+1, r24	; 0x01
    3736:	42 e0       	ldi	r20, 0x02	; 2
    3738:	50 e0       	ldi	r21, 0x00	; 0
    373a:	a4 0e       	add	r10, r20
    373c:	b5 1e       	adc	r11, r21
    373e:	61 01       	movw	r12, r2
    3740:	01 e0       	ldi	r16, 0x01	; 1
    3742:	10 e0       	ldi	r17, 0x00	; 0
    3744:	12 c0       	rjmp	.+36     	; 0x376a <vfprintf+0x160>
    3746:	f5 01       	movw	r30, r10
    3748:	c0 80       	ld	r12, Z
    374a:	d1 80       	ldd	r13, Z+1	; 0x01
    374c:	f6 fc       	sbrc	r15, 6
    374e:	03 c0       	rjmp	.+6      	; 0x3756 <vfprintf+0x14c>
    3750:	6f ef       	ldi	r22, 0xFF	; 255
    3752:	7f ef       	ldi	r23, 0xFF	; 255
    3754:	02 c0       	rjmp	.+4      	; 0x375a <vfprintf+0x150>
    3756:	69 2d       	mov	r22, r9
    3758:	70 e0       	ldi	r23, 0x00	; 0
    375a:	42 e0       	ldi	r20, 0x02	; 2
    375c:	50 e0       	ldi	r21, 0x00	; 0
    375e:	a4 0e       	add	r10, r20
    3760:	b5 1e       	adc	r11, r21
    3762:	c6 01       	movw	r24, r12
    3764:	0e 94 ed 1c 	call	0x39da	; 0x39da <strnlen>
    3768:	8c 01       	movw	r16, r24
    376a:	5f e7       	ldi	r21, 0x7F	; 127
    376c:	f5 22       	and	r15, r21
    376e:	14 c0       	rjmp	.+40     	; 0x3798 <vfprintf+0x18e>
    3770:	f5 01       	movw	r30, r10
    3772:	c0 80       	ld	r12, Z
    3774:	d1 80       	ldd	r13, Z+1	; 0x01
    3776:	f6 fc       	sbrc	r15, 6
    3778:	03 c0       	rjmp	.+6      	; 0x3780 <vfprintf+0x176>
    377a:	6f ef       	ldi	r22, 0xFF	; 255
    377c:	7f ef       	ldi	r23, 0xFF	; 255
    377e:	02 c0       	rjmp	.+4      	; 0x3784 <vfprintf+0x17a>
    3780:	69 2d       	mov	r22, r9
    3782:	70 e0       	ldi	r23, 0x00	; 0
    3784:	42 e0       	ldi	r20, 0x02	; 2
    3786:	50 e0       	ldi	r21, 0x00	; 0
    3788:	a4 0e       	add	r10, r20
    378a:	b5 1e       	adc	r11, r21
    378c:	c6 01       	movw	r24, r12
    378e:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <strnlen_P>
    3792:	8c 01       	movw	r16, r24
    3794:	50 e8       	ldi	r21, 0x80	; 128
    3796:	f5 2a       	or	r15, r21
    3798:	f3 fe       	sbrs	r15, 3
    379a:	07 c0       	rjmp	.+14     	; 0x37aa <vfprintf+0x1a0>
    379c:	1a c0       	rjmp	.+52     	; 0x37d2 <vfprintf+0x1c8>
    379e:	80 e2       	ldi	r24, 0x20	; 32
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	b3 01       	movw	r22, r6
    37a4:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <fputc>
    37a8:	ea 94       	dec	r14
    37aa:	8e 2d       	mov	r24, r14
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	08 17       	cp	r16, r24
    37b0:	19 07       	cpc	r17, r25
    37b2:	a8 f3       	brcs	.-22     	; 0x379e <vfprintf+0x194>
    37b4:	0e c0       	rjmp	.+28     	; 0x37d2 <vfprintf+0x1c8>
    37b6:	f6 01       	movw	r30, r12
    37b8:	f7 fc       	sbrc	r15, 7
    37ba:	85 91       	lpm	r24, Z+
    37bc:	f7 fe       	sbrs	r15, 7
    37be:	81 91       	ld	r24, Z+
    37c0:	6f 01       	movw	r12, r30
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	b3 01       	movw	r22, r6
    37c6:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <fputc>
    37ca:	e1 10       	cpse	r14, r1
    37cc:	ea 94       	dec	r14
    37ce:	01 50       	subi	r16, 0x01	; 1
    37d0:	10 40       	sbci	r17, 0x00	; 0
    37d2:	01 15       	cp	r16, r1
    37d4:	11 05       	cpc	r17, r1
    37d6:	79 f7       	brne	.-34     	; 0x37b6 <vfprintf+0x1ac>
    37d8:	ea c0       	rjmp	.+468    	; 0x39ae <vfprintf+0x3a4>
    37da:	94 36       	cpi	r25, 0x64	; 100
    37dc:	11 f0       	breq	.+4      	; 0x37e2 <vfprintf+0x1d8>
    37de:	99 36       	cpi	r25, 0x69	; 105
    37e0:	69 f5       	brne	.+90     	; 0x383c <vfprintf+0x232>
    37e2:	f7 fe       	sbrs	r15, 7
    37e4:	08 c0       	rjmp	.+16     	; 0x37f6 <vfprintf+0x1ec>
    37e6:	f5 01       	movw	r30, r10
    37e8:	20 81       	ld	r18, Z
    37ea:	31 81       	ldd	r19, Z+1	; 0x01
    37ec:	42 81       	ldd	r20, Z+2	; 0x02
    37ee:	53 81       	ldd	r21, Z+3	; 0x03
    37f0:	84 e0       	ldi	r24, 0x04	; 4
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	0a c0       	rjmp	.+20     	; 0x380a <vfprintf+0x200>
    37f6:	f5 01       	movw	r30, r10
    37f8:	80 81       	ld	r24, Z
    37fa:	91 81       	ldd	r25, Z+1	; 0x01
    37fc:	9c 01       	movw	r18, r24
    37fe:	44 27       	eor	r20, r20
    3800:	37 fd       	sbrc	r19, 7
    3802:	40 95       	com	r20
    3804:	54 2f       	mov	r21, r20
    3806:	82 e0       	ldi	r24, 0x02	; 2
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	a8 0e       	add	r10, r24
    380c:	b9 1e       	adc	r11, r25
    380e:	9f e6       	ldi	r25, 0x6F	; 111
    3810:	f9 22       	and	r15, r25
    3812:	57 ff       	sbrs	r21, 7
    3814:	09 c0       	rjmp	.+18     	; 0x3828 <vfprintf+0x21e>
    3816:	50 95       	com	r21
    3818:	40 95       	com	r20
    381a:	30 95       	com	r19
    381c:	21 95       	neg	r18
    381e:	3f 4f       	sbci	r19, 0xFF	; 255
    3820:	4f 4f       	sbci	r20, 0xFF	; 255
    3822:	5f 4f       	sbci	r21, 0xFF	; 255
    3824:	e0 e8       	ldi	r30, 0x80	; 128
    3826:	fe 2a       	or	r15, r30
    3828:	ca 01       	movw	r24, r20
    382a:	b9 01       	movw	r22, r18
    382c:	a1 01       	movw	r20, r2
    382e:	2a e0       	ldi	r18, 0x0A	; 10
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__ultoa_invert>
    3836:	d8 2e       	mov	r13, r24
    3838:	d2 18       	sub	r13, r2
    383a:	40 c0       	rjmp	.+128    	; 0x38bc <vfprintf+0x2b2>
    383c:	95 37       	cpi	r25, 0x75	; 117
    383e:	29 f4       	brne	.+10     	; 0x384a <vfprintf+0x240>
    3840:	1f 2d       	mov	r17, r15
    3842:	1f 7e       	andi	r17, 0xEF	; 239
    3844:	2a e0       	ldi	r18, 0x0A	; 10
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	1d c0       	rjmp	.+58     	; 0x3884 <vfprintf+0x27a>
    384a:	1f 2d       	mov	r17, r15
    384c:	19 7f       	andi	r17, 0xF9	; 249
    384e:	9f 36       	cpi	r25, 0x6F	; 111
    3850:	61 f0       	breq	.+24     	; 0x386a <vfprintf+0x260>
    3852:	90 37       	cpi	r25, 0x70	; 112
    3854:	20 f4       	brcc	.+8      	; 0x385e <vfprintf+0x254>
    3856:	98 35       	cpi	r25, 0x58	; 88
    3858:	09 f0       	breq	.+2      	; 0x385c <vfprintf+0x252>
    385a:	ac c0       	rjmp	.+344    	; 0x39b4 <vfprintf+0x3aa>
    385c:	0f c0       	rjmp	.+30     	; 0x387c <vfprintf+0x272>
    385e:	90 37       	cpi	r25, 0x70	; 112
    3860:	39 f0       	breq	.+14     	; 0x3870 <vfprintf+0x266>
    3862:	98 37       	cpi	r25, 0x78	; 120
    3864:	09 f0       	breq	.+2      	; 0x3868 <vfprintf+0x25e>
    3866:	a6 c0       	rjmp	.+332    	; 0x39b4 <vfprintf+0x3aa>
    3868:	04 c0       	rjmp	.+8      	; 0x3872 <vfprintf+0x268>
    386a:	28 e0       	ldi	r18, 0x08	; 8
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	0a c0       	rjmp	.+20     	; 0x3884 <vfprintf+0x27a>
    3870:	10 61       	ori	r17, 0x10	; 16
    3872:	14 fd       	sbrc	r17, 4
    3874:	14 60       	ori	r17, 0x04	; 4
    3876:	20 e1       	ldi	r18, 0x10	; 16
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	04 c0       	rjmp	.+8      	; 0x3884 <vfprintf+0x27a>
    387c:	14 fd       	sbrc	r17, 4
    387e:	16 60       	ori	r17, 0x06	; 6
    3880:	20 e1       	ldi	r18, 0x10	; 16
    3882:	32 e0       	ldi	r19, 0x02	; 2
    3884:	17 ff       	sbrs	r17, 7
    3886:	08 c0       	rjmp	.+16     	; 0x3898 <vfprintf+0x28e>
    3888:	f5 01       	movw	r30, r10
    388a:	60 81       	ld	r22, Z
    388c:	71 81       	ldd	r23, Z+1	; 0x01
    388e:	82 81       	ldd	r24, Z+2	; 0x02
    3890:	93 81       	ldd	r25, Z+3	; 0x03
    3892:	44 e0       	ldi	r20, 0x04	; 4
    3894:	50 e0       	ldi	r21, 0x00	; 0
    3896:	08 c0       	rjmp	.+16     	; 0x38a8 <vfprintf+0x29e>
    3898:	f5 01       	movw	r30, r10
    389a:	80 81       	ld	r24, Z
    389c:	91 81       	ldd	r25, Z+1	; 0x01
    389e:	bc 01       	movw	r22, r24
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	42 e0       	ldi	r20, 0x02	; 2
    38a6:	50 e0       	ldi	r21, 0x00	; 0
    38a8:	a4 0e       	add	r10, r20
    38aa:	b5 1e       	adc	r11, r21
    38ac:	a1 01       	movw	r20, r2
    38ae:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__ultoa_invert>
    38b2:	d8 2e       	mov	r13, r24
    38b4:	d2 18       	sub	r13, r2
    38b6:	8f e7       	ldi	r24, 0x7F	; 127
    38b8:	f8 2e       	mov	r15, r24
    38ba:	f1 22       	and	r15, r17
    38bc:	f6 fe       	sbrs	r15, 6
    38be:	0b c0       	rjmp	.+22     	; 0x38d6 <vfprintf+0x2cc>
    38c0:	5e ef       	ldi	r21, 0xFE	; 254
    38c2:	f5 22       	and	r15, r21
    38c4:	d9 14       	cp	r13, r9
    38c6:	38 f4       	brcc	.+14     	; 0x38d6 <vfprintf+0x2cc>
    38c8:	f4 fe       	sbrs	r15, 4
    38ca:	07 c0       	rjmp	.+14     	; 0x38da <vfprintf+0x2d0>
    38cc:	f2 fc       	sbrc	r15, 2
    38ce:	05 c0       	rjmp	.+10     	; 0x38da <vfprintf+0x2d0>
    38d0:	8f ee       	ldi	r24, 0xEF	; 239
    38d2:	f8 22       	and	r15, r24
    38d4:	02 c0       	rjmp	.+4      	; 0x38da <vfprintf+0x2d0>
    38d6:	1d 2d       	mov	r17, r13
    38d8:	01 c0       	rjmp	.+2      	; 0x38dc <vfprintf+0x2d2>
    38da:	19 2d       	mov	r17, r9
    38dc:	f4 fe       	sbrs	r15, 4
    38de:	0d c0       	rjmp	.+26     	; 0x38fa <vfprintf+0x2f0>
    38e0:	fe 01       	movw	r30, r28
    38e2:	ed 0d       	add	r30, r13
    38e4:	f1 1d       	adc	r31, r1
    38e6:	80 81       	ld	r24, Z
    38e8:	80 33       	cpi	r24, 0x30	; 48
    38ea:	19 f4       	brne	.+6      	; 0x38f2 <vfprintf+0x2e8>
    38ec:	99 ee       	ldi	r25, 0xE9	; 233
    38ee:	f9 22       	and	r15, r25
    38f0:	08 c0       	rjmp	.+16     	; 0x3902 <vfprintf+0x2f8>
    38f2:	1f 5f       	subi	r17, 0xFF	; 255
    38f4:	f2 fe       	sbrs	r15, 2
    38f6:	05 c0       	rjmp	.+10     	; 0x3902 <vfprintf+0x2f8>
    38f8:	03 c0       	rjmp	.+6      	; 0x3900 <vfprintf+0x2f6>
    38fa:	8f 2d       	mov	r24, r15
    38fc:	86 78       	andi	r24, 0x86	; 134
    38fe:	09 f0       	breq	.+2      	; 0x3902 <vfprintf+0x2f8>
    3900:	1f 5f       	subi	r17, 0xFF	; 255
    3902:	0f 2d       	mov	r16, r15
    3904:	f3 fc       	sbrc	r15, 3
    3906:	14 c0       	rjmp	.+40     	; 0x3930 <vfprintf+0x326>
    3908:	f0 fe       	sbrs	r15, 0
    390a:	0f c0       	rjmp	.+30     	; 0x392a <vfprintf+0x320>
    390c:	1e 15       	cp	r17, r14
    390e:	10 f0       	brcs	.+4      	; 0x3914 <vfprintf+0x30a>
    3910:	9d 2c       	mov	r9, r13
    3912:	0b c0       	rjmp	.+22     	; 0x392a <vfprintf+0x320>
    3914:	9d 2c       	mov	r9, r13
    3916:	9e 0c       	add	r9, r14
    3918:	91 1a       	sub	r9, r17
    391a:	1e 2d       	mov	r17, r14
    391c:	06 c0       	rjmp	.+12     	; 0x392a <vfprintf+0x320>
    391e:	80 e2       	ldi	r24, 0x20	; 32
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	b3 01       	movw	r22, r6
    3924:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <fputc>
    3928:	1f 5f       	subi	r17, 0xFF	; 255
    392a:	1e 15       	cp	r17, r14
    392c:	c0 f3       	brcs	.-16     	; 0x391e <vfprintf+0x314>
    392e:	04 c0       	rjmp	.+8      	; 0x3938 <vfprintf+0x32e>
    3930:	1e 15       	cp	r17, r14
    3932:	10 f4       	brcc	.+4      	; 0x3938 <vfprintf+0x32e>
    3934:	e1 1a       	sub	r14, r17
    3936:	01 c0       	rjmp	.+2      	; 0x393a <vfprintf+0x330>
    3938:	ee 24       	eor	r14, r14
    393a:	04 ff       	sbrs	r16, 4
    393c:	0f c0       	rjmp	.+30     	; 0x395c <vfprintf+0x352>
    393e:	80 e3       	ldi	r24, 0x30	; 48
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	b3 01       	movw	r22, r6
    3944:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <fputc>
    3948:	02 ff       	sbrs	r16, 2
    394a:	1d c0       	rjmp	.+58     	; 0x3986 <vfprintf+0x37c>
    394c:	01 fd       	sbrc	r16, 1
    394e:	03 c0       	rjmp	.+6      	; 0x3956 <vfprintf+0x34c>
    3950:	88 e7       	ldi	r24, 0x78	; 120
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	0e c0       	rjmp	.+28     	; 0x3972 <vfprintf+0x368>
    3956:	88 e5       	ldi	r24, 0x58	; 88
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	0b c0       	rjmp	.+22     	; 0x3972 <vfprintf+0x368>
    395c:	80 2f       	mov	r24, r16
    395e:	86 78       	andi	r24, 0x86	; 134
    3960:	91 f0       	breq	.+36     	; 0x3986 <vfprintf+0x37c>
    3962:	01 ff       	sbrs	r16, 1
    3964:	02 c0       	rjmp	.+4      	; 0x396a <vfprintf+0x360>
    3966:	8b e2       	ldi	r24, 0x2B	; 43
    3968:	01 c0       	rjmp	.+2      	; 0x396c <vfprintf+0x362>
    396a:	80 e2       	ldi	r24, 0x20	; 32
    396c:	f7 fc       	sbrc	r15, 7
    396e:	8d e2       	ldi	r24, 0x2D	; 45
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	b3 01       	movw	r22, r6
    3974:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <fputc>
    3978:	06 c0       	rjmp	.+12     	; 0x3986 <vfprintf+0x37c>
    397a:	80 e3       	ldi	r24, 0x30	; 48
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	b3 01       	movw	r22, r6
    3980:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <fputc>
    3984:	9a 94       	dec	r9
    3986:	d9 14       	cp	r13, r9
    3988:	c0 f3       	brcs	.-16     	; 0x397a <vfprintf+0x370>
    398a:	da 94       	dec	r13
    398c:	f1 01       	movw	r30, r2
    398e:	ed 0d       	add	r30, r13
    3990:	f1 1d       	adc	r31, r1
    3992:	80 81       	ld	r24, Z
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	b3 01       	movw	r22, r6
    3998:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <fputc>
    399c:	dd 20       	and	r13, r13
    399e:	a9 f7       	brne	.-22     	; 0x398a <vfprintf+0x380>
    39a0:	06 c0       	rjmp	.+12     	; 0x39ae <vfprintf+0x3a4>
    39a2:	80 e2       	ldi	r24, 0x20	; 32
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	b3 01       	movw	r22, r6
    39a8:	0e 94 f8 1c 	call	0x39f0	; 0x39f0 <fputc>
    39ac:	ea 94       	dec	r14
    39ae:	ee 20       	and	r14, r14
    39b0:	c1 f7       	brne	.-16     	; 0x39a2 <vfprintf+0x398>
    39b2:	43 ce       	rjmp	.-890    	; 0x363a <vfprintf+0x30>
    39b4:	f3 01       	movw	r30, r6
    39b6:	66 81       	ldd	r22, Z+6	; 0x06
    39b8:	77 81       	ldd	r23, Z+7	; 0x07
    39ba:	cb 01       	movw	r24, r22
    39bc:	2b 96       	adiw	r28, 0x0b	; 11
    39be:	e2 e1       	ldi	r30, 0x12	; 18
    39c0:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__>

000039c4 <strnlen_P>:
    39c4:	fc 01       	movw	r30, r24
    39c6:	05 90       	lpm	r0, Z+
    39c8:	61 50       	subi	r22, 0x01	; 1
    39ca:	70 40       	sbci	r23, 0x00	; 0
    39cc:	01 10       	cpse	r0, r1
    39ce:	d8 f7       	brcc	.-10     	; 0x39c6 <strnlen_P+0x2>
    39d0:	80 95       	com	r24
    39d2:	90 95       	com	r25
    39d4:	8e 0f       	add	r24, r30
    39d6:	9f 1f       	adc	r25, r31
    39d8:	08 95       	ret

000039da <strnlen>:
    39da:	fc 01       	movw	r30, r24
    39dc:	61 50       	subi	r22, 0x01	; 1
    39de:	70 40       	sbci	r23, 0x00	; 0
    39e0:	01 90       	ld	r0, Z+
    39e2:	01 10       	cpse	r0, r1
    39e4:	d8 f7       	brcc	.-10     	; 0x39dc <strnlen+0x2>
    39e6:	80 95       	com	r24
    39e8:	90 95       	com	r25
    39ea:	8e 0f       	add	r24, r30
    39ec:	9f 1f       	adc	r25, r31
    39ee:	08 95       	ret

000039f0 <fputc>:
    39f0:	0f 93       	push	r16
    39f2:	1f 93       	push	r17
    39f4:	cf 93       	push	r28
    39f6:	df 93       	push	r29
    39f8:	8c 01       	movw	r16, r24
    39fa:	eb 01       	movw	r28, r22
    39fc:	8b 81       	ldd	r24, Y+3	; 0x03
    39fe:	81 ff       	sbrs	r24, 1
    3a00:	1b c0       	rjmp	.+54     	; 0x3a38 <fputc+0x48>
    3a02:	82 ff       	sbrs	r24, 2
    3a04:	0d c0       	rjmp	.+26     	; 0x3a20 <fputc+0x30>
    3a06:	2e 81       	ldd	r18, Y+6	; 0x06
    3a08:	3f 81       	ldd	r19, Y+7	; 0x07
    3a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a0c:	9d 81       	ldd	r25, Y+5	; 0x05
    3a0e:	28 17       	cp	r18, r24
    3a10:	39 07       	cpc	r19, r25
    3a12:	64 f4       	brge	.+24     	; 0x3a2c <fputc+0x3c>
    3a14:	e8 81       	ld	r30, Y
    3a16:	f9 81       	ldd	r31, Y+1	; 0x01
    3a18:	01 93       	st	Z+, r16
    3a1a:	f9 83       	std	Y+1, r31	; 0x01
    3a1c:	e8 83       	st	Y, r30
    3a1e:	06 c0       	rjmp	.+12     	; 0x3a2c <fputc+0x3c>
    3a20:	e8 85       	ldd	r30, Y+8	; 0x08
    3a22:	f9 85       	ldd	r31, Y+9	; 0x09
    3a24:	80 2f       	mov	r24, r16
    3a26:	09 95       	icall
    3a28:	89 2b       	or	r24, r25
    3a2a:	31 f4       	brne	.+12     	; 0x3a38 <fputc+0x48>
    3a2c:	8e 81       	ldd	r24, Y+6	; 0x06
    3a2e:	9f 81       	ldd	r25, Y+7	; 0x07
    3a30:	01 96       	adiw	r24, 0x01	; 1
    3a32:	9f 83       	std	Y+7, r25	; 0x07
    3a34:	8e 83       	std	Y+6, r24	; 0x06
    3a36:	02 c0       	rjmp	.+4      	; 0x3a3c <fputc+0x4c>
    3a38:	0f ef       	ldi	r16, 0xFF	; 255
    3a3a:	1f ef       	ldi	r17, 0xFF	; 255
    3a3c:	c8 01       	movw	r24, r16
    3a3e:	df 91       	pop	r29
    3a40:	cf 91       	pop	r28
    3a42:	1f 91       	pop	r17
    3a44:	0f 91       	pop	r16
    3a46:	08 95       	ret

00003a48 <__ultoa_invert>:
    3a48:	fa 01       	movw	r30, r20
    3a4a:	aa 27       	eor	r26, r26
    3a4c:	28 30       	cpi	r18, 0x08	; 8
    3a4e:	51 f1       	breq	.+84     	; 0x3aa4 <__ultoa_invert+0x5c>
    3a50:	20 31       	cpi	r18, 0x10	; 16
    3a52:	81 f1       	breq	.+96     	; 0x3ab4 <__ultoa_invert+0x6c>
    3a54:	e8 94       	clt
    3a56:	6f 93       	push	r22
    3a58:	6e 7f       	andi	r22, 0xFE	; 254
    3a5a:	6e 5f       	subi	r22, 0xFE	; 254
    3a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    3a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    3a60:	9f 4f       	sbci	r25, 0xFF	; 255
    3a62:	af 4f       	sbci	r26, 0xFF	; 255
    3a64:	b1 e0       	ldi	r27, 0x01	; 1
    3a66:	3e d0       	rcall	.+124    	; 0x3ae4 <__ultoa_invert+0x9c>
    3a68:	b4 e0       	ldi	r27, 0x04	; 4
    3a6a:	3c d0       	rcall	.+120    	; 0x3ae4 <__ultoa_invert+0x9c>
    3a6c:	67 0f       	add	r22, r23
    3a6e:	78 1f       	adc	r23, r24
    3a70:	89 1f       	adc	r24, r25
    3a72:	9a 1f       	adc	r25, r26
    3a74:	a1 1d       	adc	r26, r1
    3a76:	68 0f       	add	r22, r24
    3a78:	79 1f       	adc	r23, r25
    3a7a:	8a 1f       	adc	r24, r26
    3a7c:	91 1d       	adc	r25, r1
    3a7e:	a1 1d       	adc	r26, r1
    3a80:	6a 0f       	add	r22, r26
    3a82:	71 1d       	adc	r23, r1
    3a84:	81 1d       	adc	r24, r1
    3a86:	91 1d       	adc	r25, r1
    3a88:	a1 1d       	adc	r26, r1
    3a8a:	20 d0       	rcall	.+64     	; 0x3acc <__ultoa_invert+0x84>
    3a8c:	09 f4       	brne	.+2      	; 0x3a90 <__ultoa_invert+0x48>
    3a8e:	68 94       	set
    3a90:	3f 91       	pop	r19
    3a92:	2a e0       	ldi	r18, 0x0A	; 10
    3a94:	26 9f       	mul	r18, r22
    3a96:	11 24       	eor	r1, r1
    3a98:	30 19       	sub	r19, r0
    3a9a:	30 5d       	subi	r19, 0xD0	; 208
    3a9c:	31 93       	st	Z+, r19
    3a9e:	de f6       	brtc	.-74     	; 0x3a56 <__ultoa_invert+0xe>
    3aa0:	cf 01       	movw	r24, r30
    3aa2:	08 95       	ret
    3aa4:	46 2f       	mov	r20, r22
    3aa6:	47 70       	andi	r20, 0x07	; 7
    3aa8:	40 5d       	subi	r20, 0xD0	; 208
    3aaa:	41 93       	st	Z+, r20
    3aac:	b3 e0       	ldi	r27, 0x03	; 3
    3aae:	0f d0       	rcall	.+30     	; 0x3ace <__ultoa_invert+0x86>
    3ab0:	c9 f7       	brne	.-14     	; 0x3aa4 <__ultoa_invert+0x5c>
    3ab2:	f6 cf       	rjmp	.-20     	; 0x3aa0 <__ultoa_invert+0x58>
    3ab4:	46 2f       	mov	r20, r22
    3ab6:	4f 70       	andi	r20, 0x0F	; 15
    3ab8:	40 5d       	subi	r20, 0xD0	; 208
    3aba:	4a 33       	cpi	r20, 0x3A	; 58
    3abc:	18 f0       	brcs	.+6      	; 0x3ac4 <__ultoa_invert+0x7c>
    3abe:	49 5d       	subi	r20, 0xD9	; 217
    3ac0:	31 fd       	sbrc	r19, 1
    3ac2:	40 52       	subi	r20, 0x20	; 32
    3ac4:	41 93       	st	Z+, r20
    3ac6:	02 d0       	rcall	.+4      	; 0x3acc <__ultoa_invert+0x84>
    3ac8:	a9 f7       	brne	.-22     	; 0x3ab4 <__ultoa_invert+0x6c>
    3aca:	ea cf       	rjmp	.-44     	; 0x3aa0 <__ultoa_invert+0x58>
    3acc:	b4 e0       	ldi	r27, 0x04	; 4
    3ace:	a6 95       	lsr	r26
    3ad0:	97 95       	ror	r25
    3ad2:	87 95       	ror	r24
    3ad4:	77 95       	ror	r23
    3ad6:	67 95       	ror	r22
    3ad8:	ba 95       	dec	r27
    3ada:	c9 f7       	brne	.-14     	; 0x3ace <__ultoa_invert+0x86>
    3adc:	00 97       	sbiw	r24, 0x00	; 0
    3ade:	61 05       	cpc	r22, r1
    3ae0:	71 05       	cpc	r23, r1
    3ae2:	08 95       	ret
    3ae4:	9b 01       	movw	r18, r22
    3ae6:	ac 01       	movw	r20, r24
    3ae8:	0a 2e       	mov	r0, r26
    3aea:	06 94       	lsr	r0
    3aec:	57 95       	ror	r21
    3aee:	47 95       	ror	r20
    3af0:	37 95       	ror	r19
    3af2:	27 95       	ror	r18
    3af4:	ba 95       	dec	r27
    3af6:	c9 f7       	brne	.-14     	; 0x3aea <__ultoa_invert+0xa2>
    3af8:	62 0f       	add	r22, r18
    3afa:	73 1f       	adc	r23, r19
    3afc:	84 1f       	adc	r24, r20
    3afe:	95 1f       	adc	r25, r21
    3b00:	a0 1d       	adc	r26, r0
    3b02:	08 95       	ret

00003b04 <_exit>:
    3b04:	f8 94       	cli

00003b06 <__stop_program>:
    3b06:	ff cf       	rjmp	.-2      	; 0x3b06 <__stop_program>
